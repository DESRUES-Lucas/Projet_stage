/*************
*** do not edit this files ***
*** Cache date : 2016-12-21 11:41:54 ***
*************/
i8n = {"en-us":{"ze-apps":{"configuration":"Configuration","utilisateurs":"Users","groupes":"Groups"}},"fr-fr":{"ze-apps":{"configuration":"Configuration","utilisateurs":"Utilisateurs","groupes":"Groupes"}}}
//var app = angular.module('zeApp', ['ngRoute', 'ngAnimate', 'services', 'checklist-model', 'ckeditor']) ;
var app = angular.module('zeApp', ['ngSanitize','ngRoute','ui.bootstrap', 'ui.sortable','checklist-model', 'digitalfondue.dftabmenu', 'ngFileUpload', ]);


app.controller('MainCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', '$interval',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, $interval) {

        // pour charger la vue par défaut
        //$location.path('/ng/com_zeapps_contact/companies');

        $scope.notifications = {};
        $rootScope.toasts = [];


        $scope.$on('$locationChangeStart', function() {
            $rootScope.currentModule = $location.path().split('/')[2];
        });

        $rootScope.defaultLang = 'fr-fr';
        
        $scope.dropdown = false;
        $scope.showNotification = false;
        $scope.showLabel = false;


        $rootScope.logout = function () {
            window.document.location.href = '/logout';
        };

        $scope.loadMenu = function(argMenu, argItemActive) {
            $scope["menu"] = argMenu ;
            $scope["menu_active"] = argItemActive ;

            $("#left-menu .nav a").blur();
        };

        /********** Notification **********/

        $scope.fullSizedMenu = true;

        $scope.toggleMenuSize = function(){
            $scope.fullSizedMenu = !$scope.fullSizedMenu;
        };


        /********** Notification **********/

        $scope.toggleNotification = function(){
            $scope.showNotification = !$scope.showNotification;
            $scope.dropdown = false;
            if($scope.showNotification){
                angular.forEach($scope.notifications, function(module){
                    for (var i = 0; i < module.notifications.length; i++) {
                        module.notifications[i].seen = 1;
                    }
                });
                $http.post('/ze-apps/notification/seenNotification', $scope.notifications);
            }

        };

        var loadNotifications = function(){
            $http.get('/ze-apps/notification/getAllUnread').then(function (response) {
                if (response.data && response.data != false) {
                    var notifications = {};
                    for(var i=0; i < response.data.length; i++){
                        if(notifications[response.data[i].module] == undefined) {
                            notifications[response.data[i].module] = {};
                            notifications[response.data[i].module].notifications = [];
                            notifications[response.data[i].module].color = response.data[i].color;
                        }
                        notifications[response.data[i].module].notifications.push(response.data[i]);
                    }
                    $scope.notifications = notifications;
                }
            });
        };

        loadNotifications();

        $interval(function(){
            loadNotifications();
        }, 30000);

        $scope.notificationsNotSeen = function() {
            var total = 0;
            angular.forEach($scope.notifications, function(module){
                for (var i = 0; i < module.notifications.length; i++) {
                    if (module.notifications[i].seen == 0)
                        total++;
                }
            });
            return total;
        };

        $scope.hasUnreadNotifications = function(){
            return Object.keys($scope.notifications).length;
        };

        $scope.readNotification = function(notification){
            notification.read_state = 1;
            $http.post('/ze-apps/notification/readNotification/'+notification.id).then(function(response){
                if(response.data && response.data != "false"){
                    $scope.notifications[notification.module].notifications.splice($scope.notifications[notification.module].notifications.indexOf(notification),1);
                    if(!$scope.notifications[notification.module].notifications.length)
                        delete $scope.notifications[notification.module];
                }
            });

        };

        $scope.readAllNotificationsFrom = function(moduleName){
            $http.post('/ze-apps/notification/readAllNotificationFrom/'+moduleName).then(function(response){
                if(response.data && response.data != "false"){
                    delete $scope.notifications[moduleName];
                }
            });
        };


        /********** Dropdown User menu *********/

        $scope.toggleDropdown = function(){
            $scope.dropdown = !$scope.dropdown;
            $scope.showNotification = false;
        };




        var getCurentUser = function () {
            var options = {};
            $http.post('/ze-apps/user/getCurrentUser', options).then(function (response) {
                if (response.status == 200) {
                    $scope.user = response.data;
                    $rootScope.userLang = response.data.lang;
                }
            });
        };
        getCurentUser() ;



        /************ Search Bar ***************/

        $scope.searchFill = "";

        $scope.search = function(){
            $http.post('/ze-apps/search/generalSearch').then(function(response){
                if (response.status == 200) {
                    $scope.searchFill = response.data;
                    console.log(response.data);
                }
            });
        }

    }]);

// creation des routes
app.config(['$routeProvider', '$locationProvider',
    function ($routeProvider, $locationProvider) {
        $locationProvider.html5Mode(true);
    }]);


// defini les caracteres separateur pour remplacer les / dans les url
var charSepUrlSlash = "999sep999sep999" ;
var charSepUrlSlashRegExp = /999sep999sep999/g ;
app.controller('ComZeAppsConfigCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope',
    function ($scope, $route, $routeParams, $location, $rootScope) {

        //$scope.$parent.loadMenu("com_ze_apps_config", "com_ze_apps_config");
        $scope.$parent.loadMenu("com_ze_apps_config", "");




    }]);
app.directive('formButtons', function($uibModal, $location){
    return {
        restrict: 'E',
        require: '^form',
        template:   "<div class='form-buttons'>" +
                        "<div class='text-center'>" +
                            "<button type='button' class='btn btn-sm btn-default' ng-click='cancel();zeapps_form_ctrl.$setPristine()'>Annuler</button>" +
                            "<button class='btn btn-success' ng-click='success();zeapps_form_ctrl.$setPristine()'>Valider</button>" +
                        "</div>"+
                    "</div>",
        link: function(scope, element, attrs, formCtrl){

            scope.zeapps_form_ctrl = formCtrl;

            scope.$on('$locationChangeStart', function(event, next, current){
                // Cancel default behavior if we have unsaved changes to the form
                if(!scope.zeapps_form_ctrl.$pristine) {
                    event.preventDefault();

                    // Hash destination
                    if (next.indexOf($location.$$host) >= 0) {
                        var posHost = next.indexOf($location.$$host);
                        var path = next.substr(posHost + 1);
                        next = path.substr(path.indexOf('/'));
                    }

                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: '/assets/angular/popupModalDeBase.html',
                        controller: 'ZeAppsPopupModalDeBaseCtrl',
                        size: 'lg',
                        resolve: {
                            titre: function () {
                                return 'Attention';
                            },
                            msg: function () {
                                return 'Des modifications non sauvegardées sont en cours, que voulez-vous faire ?';
                            },
                            action_danger: function () {
                                return 'Quitter sans enregistrer';
                            },
                            action_primary: function () {
                                return 'Rester sur la page';
                            },
                            action_success: function () {
                                return 'Enregistrer et quitter';
                            }
                        }
                    });

                    modalInstance.result.then(function (selectedItem) {
                        if (selectedItem.action == 'danger') {
                            scope.zeapps_form_ctrl.$setPristine();
                            $location.url(next);
                        } else if (selectedItem.action == 'primary') {

                        } else if (selectedItem.action == 'success') {
                            scope.success();
                            scope.zeapps_form_ctrl.$setPristine();
                            $location.url(next);
                        }
                    })
                }
            });

        }
    }
});
app.controller('ComZeAppsGroupsFormCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http',
    function ($scope, $route, $routeParams, $location, $rootScope, $http) {

        $scope.$parent.loadMenu("com_ze_apps_config", "com_ze_apps_groups");


        $scope.form = [];


        // charge la fiche
        if ($routeParams.id && $routeParams.id != 0) {
            $http.get('/ze-apps/group/get/' + $routeParams.id).then(function (response) {
                if (response.status == 200) {
                    $scope.form = response.data;

                    if ($scope.form.right_list) {
                        $scope.form.rights = $scope.form.right_list.split(",");
                    } else {
                        $scope.form.rights = [] ;
                    }

                }
            });
        }





        // charge la liste des droits
        $http.get('/ze-apps/user/getRightList').then(function (response) {
            if (response.status == 200) {
                $scope.right_list = response.data ;
            }
        });





        $scope.enregistrer = function () {
            var $data = {} ;

            if ($routeParams.id != 0) {
                $data.id = $routeParams.id;
            }

            $data.name = $scope.form.name ;
            $data.right_list = $scope.form.rights.join() ;

            $http.post('/ze-apps/group/save', $data).then(function (obj) {
                // pour que la page puisse être redirigé
                $location.path("/ng/com_zeapps/groups");
            });
        }

        $scope.annuler = function () {
            $location.path("/ng/com_zeapps/groups");
        }

    }]);
app.controller('ComZeAppsGroupsCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', '$uibModal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, $uibModal) {

        $scope.$parent.loadMenu("com_ze_apps_config", "com_ze_apps_groups");


        var loadList = function () {
            var options = {};
            $http.post('/ze-apps/group/getAll', options).then(function (response) {
                if (response.status == 200) {
                    $scope.groups = response.data ;
                }
            });
        };
        loadList() ;



        $scope.delete = function (argIdUser) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous supprimer définitivement ce groupe ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la suppression';
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {
                    $http.get('/ze-apps/group/delete/' + argIdUser).then(function (response) {
                        if (response.status == 200) {
                            loadList() ;
                        }
                    });
                }

            }, function () {
                //console.log("rien");
            });

        };

    }]);
app.directive('i8n', function($rootScope){

    var getTranslationOf = function(text){

        text = text.toLowerCase();

        if(i8n != undefined){
            if(i8n[$rootScope.userLang] != undefined){
                if(i8n[$rootScope.userLang][$rootScope.currentModule] != undefined){
                    if(i8n[$rootScope.userLang][$rootScope.currentModule][text] != undefined){
                        return i8n[$rootScope.userLang][$rootScope.currentModule][text];
                    }
                }
                var translation = '';
                angular.forEach(i8n[$rootScope.userLang], function(arr, key){
                    if(arr[text] != undefined && translation == ''){
                        translation = arr[text];
                    }
                });
                if(translation != '')
                    return translation;
            }
            if(i8n[$rootScope.defaultLang] != undefined){
                if(i8n[$rootScope.defaultLang][$rootScope.currentModule] != undefined){
                    if(i8n[$rootScope.defaultLang][$rootScope.currentModule][text] != undefined){
                        return i8n[$rootScope.defaultLang][$rootScope.currentModule][text];
                    }
                }
                var translation = '';
                angular.forEach(i8n[$rootScope.defaultLang], function(arr){
                    if(arr[text] != undefined){
                        translation = arr[text];
                    }
                });
                if(translation != '')
                    return translation;
            }
        }

        return text;
    };

    return {
        restrict: 'A',
        scope: {
            i8n: '@'
        },
        link: function(scope, elm){
            elm.html(getTranslationOf(scope.i8n));
            $rootScope.$watch('userLang', function(value, oldValue){
                if(value != undefined && value != oldValue) {
                    elm.html(getTranslationOf(scope.i8n));
                }
            });
        }
    };
});
app.controller('ZeAppsPopupModalDeBaseCtrl', function($scope, $uibModalInstance, $http, titre, msg, action_danger, action_primary, action_success) {


    $scope.titre = titre ;
    $scope.msg = msg ;
    $scope.action_danger = action_danger ;
    $scope.action_primary = action_primary ;
    $scope.action_success = action_success ;





    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };

    $scope.action_danger_click = function () {
        $uibModalInstance.close({action:'danger'});
    };

    $scope.action_primary_click = function () {
        $uibModalInstance.close({action:'primary'});
    };

    $scope.action_success_click = function () {
        $uibModalInstance.close({action:'success'});
    };

}) ;




var listModuleModalFunction = [] ;

app.factory('zeapps_modal', ['$uibModal', function($uibModal) {
    var myServiceInstance = {};


    myServiceInstance.loadModule = function(moduleName, functionName, option, next) {

        var moduleTrouve = false ;
        for (var i = 0 ; i < listModuleModalFunction.length ; i++) {
            if (listModuleModalFunction[i].module_name == moduleName && listModuleModalFunction[i].function_name == functionName) {
                moduleTrouve = true ;

                var resolve = listModuleModalFunction[i].resolve ;
                resolve.option = option;

                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: listModuleModalFunction[i].templateUrl,
                    controller: listModuleModalFunction[i].controller,
                    size: listModuleModalFunction[i].size,
                    resolve: listModuleModalFunction[i].resolve
                });

                modalInstance.result.then(function (selectedItem) {
                    next(selectedItem);
                }, function () {
                    //console.log("rien");
                });

                break;
            }
        }


        if (moduleTrouve == false) {
            alert("Impossible de charger le module");
        }

    }


    // factory function body that constructs shinyNewServiceInstance
    return myServiceInstance;
}]);
app.controller('ComZeAppsProfileFormCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http',
    function ($scope, $route, $routeParams, $location, $rootScope, $http) {

        $scope.form = [];


        // charge la fiche

            $http.get('/ze-apps/profile/get/' + $routeParams.id).then(function (response) {
                if (response.status == 200) {
                    $scope.form = response.data;

                    if ($scope.form.groups_list) {
                        $scope.form.groups = $scope.form.groups_list.split(",");
                    } else {
                        $scope.form.groups = [];
                    }


                    if ($scope.form.right_list) {
                        $scope.form.rights = $scope.form.right_list.split(",");
                    } else {
                        $scope.form.rights = [] ;
                    }

                }
            });






        var options = {};
        $http.post('/ze-apps/group/getAll', options).then(function (response) {
            if (response.status == 200) {
                $scope.groups = response.data ;
            }
        });



        // charge la liste des droits
        $http.get('/ze-apps/user/getRightList').then(function (response) {
            if (response.status == 200) {
                $scope.right_list = response.data ;
            }
        });




        $scope.enregistrer = function () {
            var $data = {} ;



            if ($scope.form.password_field && $scope.form.password_field.trim() != "") {
                $data.password = $scope.form.password_field ;
            }

            $data.firstname = $scope.form.firstname ;
            $data.lastname = $scope.form.lastname ;
            $data.email = $scope.form.email ;

            $data.groups_list = $scope.form.groups.join();
            $data.right_list = $scope.form.rights.join() ;

            $http.post('/ze-apps/profile/update_user', $data).then(function (obj) {
                // pour que la page puisse être redirigé
                $location.path("/ng/com_zeapps/profile/view");
            });
        }


        $scope.annuler = function () {
            $location.path("/ng/com_zeapps/profile/view");

        }


    }]);
app.controller('ComZeAppsProfileNotificationsCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', '$interval',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, $interval) {

        $scope.notifications = {};

        var loadNotifications = function(){
            $http.get('/ze-apps/notification/getAll').then(function (response) {
                if (response.data && response.data != false) {
                    var notifications = {};
                    for(var i=0; i < response.data.length; i++){
                        if(notifications[response.data[i].module] == undefined) {
                            notifications[response.data[i].module] = {};
                            notifications[response.data[i].module].notifications = [];
                            notifications[response.data[i].module].color = response.data[i].color;
                        }
                        notifications[response.data[i].module].notifications.push(response.data[i]);
                    }
                    $scope.notifications = notifications;
                }
            });
        };

        loadNotifications();

        $interval(function(){
            loadNotifications();
        }, 30000);

        $scope.hasNotifications = function(){
            return Object.keys($scope.notifications).length;
        };

    }]);
app.controller('ComZeAppsProfileViewCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', '$uibModal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, $uibModal) {


        // Edition d'un plan de charge

        $scope.edit_profile = function () {
            $location.path("/ng/com_zeapps/profile/edit");
        };

        // charge la fiche

        $http.get('/ze-apps/profile/get/' + $routeParams.id).then(function (response) {
            if (response.status == 200) {
                $scope.user = response.data;
            }
        });

    }]);
app.config(['$routeProvider',
    function ($routeProvider) {
        $routeProvider

            .when('/', {
                redirectTo: '/ng/com_zeapps_contact/companies'
            })

            .when('/ng/', {
                redirectTo: '/ng/com_zeapps_contact/companies'
            })

            .when('/ng/com_zeapps/config', {
                templateUrl: '/ze-apps/config/',
                controller: 'ComZeAppsConfigCtrl'
            })

            .when('/ng/com_zeapps/users', {
                templateUrl: '/ze-apps/user/',
                controller: 'ComZeAppsUsersCtrl'
            })
            .when('/ng/com_zeapps/users/view/:id?', {
                templateUrl: '/ze-apps/user/form ',
                controller: 'ComZeAppsUsersFormCtrl'
            })


            .when('/ng/com_zeapps/groups', {
                templateUrl: '/ze-apps/group/',
                controller: 'ComZeAppsGroupsCtrl'
            })
            .when('/ng/com_zeapps/groups/view/:id?', {
                templateUrl: '/ze-apps/group/form ',
                controller: 'ComZeAppsGroupsFormCtrl'
            })



            .when('/ng/com_zeapps/profile/view', {
                templateUrl:'/ze-apps/profile/view',
                controller: 'ComZeAppsProfileViewCtrl'
            })

            .when('/ng/com_zeapps/profile/edit', {
                templateUrl:'/ze-apps/profile/form',
                controller: 'ComZeAppsProfileFormCtrl'
            })

            .when('/ng/com_zeapps/profile/notifications', {
                templateUrl:'/ze-apps/profile/notifications',
                controller: 'ComZeAppsProfileNotificationsCtrl'
            })


            .otherwise({
                templateUrl: '/ze-apps/zeapps/pagenotfound'
            })


        ;
    }]);


app.directive('toasts', function($rootScope, $compile){
    return {
        restrict: 'E',
        link: function(scope, element, attrs){
            $rootScope.$watch('toasts', function(toasts, oldToasts){
                if(toasts != undefined && toasts != oldToasts){
                    angular.forEach(toasts, function(toast, key){
                        $compile('<div class="alert alert-'+Object.keys(toast)[0]+' alert-dismissible" role="alert">'+
                            '<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>'+
                            toast[Object.keys(toast)[0]]+
                            '</div>')(scope, function(cloned, scope){
                            element.prepend(cloned);
                            cloned.delay(3000).fadeOut(800, function(){
                                cloned.alert('close');
                            });
                        });
                        delete toasts[key];
                    });
                }
            }, true);
        }
    }
});
app.controller('ComZeAppsUsersFormCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http',
    function ($scope, $route, $routeParams, $location, $rootScope, $http) {

        $scope.$parent.loadMenu("com_ze_apps_config", "com_ze_apps_users");


        $scope.form = [];


        // charge la fiche
        if ($routeParams.id && $routeParams.id != 0) {
            $http.get('/ze-apps/user/get/' + $routeParams.id).then(function (response) {
                if (response.status == 200) {
                    $scope.form = response.data;

                }
            });
        }





        var options = {};
        $http.post('/ze-apps/group/getAll', options).then(function (response) {
            if (response.status == 200) {
                $scope.groups = response.data ;
            }
        });



        // charge la liste des droits
        $http.get('/ze-apps/user/getRightList').then(function (response) {
            if (response.status == 200) {
                $scope.right_list = response.data ;
            }
        });




        $scope.enregistrer = function () {
            var $data = {} ;

            if ($routeParams.id != 0) {
                $data.id = $routeParams.id;
            }

            if ($scope.form.password_field && $scope.form.password_field.trim() != "") {
                $data.password = $scope.form.password_field ;
            }

            $data.firstname = $scope.form.firstname ;
            $data.lastname = $scope.form.lastname ;
            $data.email = $scope.form.email ;

            $data.groups_list = $scope.form.groups.join();
            $data.right_list = $scope.form.rights.join() ;

            $http.post('/ze-apps/user/save', $data).then(function (obj) {
                // pour que la page puisse être redirigé
                $location.path("/ng/com_zeapps/users");
            });
        }

        $scope.annuler = function () {
            $location.path("/ng/com_zeapps/users");
        }

    }]);
app.controller('ComZeAppsUsersCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', '$uibModal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, $uibModal) {

        $scope.$parent.loadMenu("com_ze_apps_config", "com_ze_apps_users");


        var loadList = function () {
            var options = {};
            $http.post('/ze-apps/user/getAll', options).then(function (response) {
                if (response.status == 200) {
                    $scope.users = response.data ;
                }
            });
        };
        loadList() ;



        $scope.delete = function (argIdUser) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous supprimer définitivement cet utilisateur ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la suppression';
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {
                    $http.get('/ze-apps/user/delete/' + argIdUser).then(function (response) {
                        if (response.status == 200) {
                            loadList() ;
                        }
                    });
                }

            }, function () {
                //console.log("rien");
            });

        };

    }]);
// declare the modal to the app service
listModuleModalFunction.push({
    module_name:'com_zeapps_core',
    function_name:'search_user',
    templateUrl:'/ze-apps/user/modal_user',
    controller:'ZeAppsCoreModalUserCtrl',
    size:'lg',
    resolve:{
        titre: function () {
            return 'Recherche d\'un utilisateur';
        }
    }
});


app.controller('ZeAppsCoreModalUserCtrl', function($scope, $uibModalInstance, $http, titre, option) {
    $scope.titre = titre ;


    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };



    var loadList = function () {
        var options = {};
        $http.post('/ze-apps/user/getAll', options).then(function (response) {
            if (response.status == 200) {
                $scope.users = response.data ;
            }
        });
    };
    loadList() ;


    $scope.loadUser = function (id_user) {

        // search the user
        var user = false ;
        for (var i = 0 ; i < $scope.users.length ; i++) {
            if ($scope.users[i].id == id_user) {
                user = $scope.users[i] ;
                break;
            }
        }

        $uibModalInstance.close(user);
    }

}) ;
// declare the modal to the app service
listModuleModalFunction.push({
    module_name:'com_zeapps_contact',
    function_name:'search_code_naf',
    templateUrl:'/com_zeapps_contact/code_naf/modal_code_naf',
    controller:'ZeAppsContactsModalCodeNafCtrl',
    size:'lg',
    resolve:{
        titre: function () {
            return 'Recherche d\'un code NAF';
        }
    }
});


app.controller('ZeAppsContactsModalCodeNafCtrl', function($scope, $uibModalInstance, $http, titre, option) {
    $scope.titre = titre ;


    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };



    var loadList = function () {
        var options = {};
        $http.post('/com_zeapps_contact/code_naf/getAll', options).then(function (response) {
            if (response.status == 200) {
                $scope.code_naf = response.data ;
            }
        });
    };
    loadList() ;


    $scope.loadCodeNaf = function (code_naf_id) {

        // search the company
        var code_naf = false ;
        for (var i = 0 ; i < $scope.code_naf.length ; i++) {
            if ($scope.code_naf[i].code_naf == code_naf_id) {
                code_naf = $scope.code_naf[i] ;
                break;
            }
        }

        $uibModalInstance.close(code_naf);
    }

}) ;
app.controller('ComZeappsContactCompaniesFormListCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', 'zeapps_modal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, zeapps_modal) {

        $scope.$parent.loadMenu("com_ze_apps_sales", "com_zeapps_sales_company");


        $scope.form = [];

        // charge la fiche
        if ($routeParams.id && $routeParams.id != 0) {
            $http.get('/com_zeapps_contact/companies/get/' + $routeParams.id).then(function (response) {
                if (response.status == 200) {
                    $scope.form = response.data;
                }
            });
        }






        $scope.loadAccountManager = function () {
            zeapps_modal.loadModule("com_zeapps_core", "search_user", {}, function(objReturn) {
                if (objReturn) {
                    $scope.form.id_user_account_manager = objReturn.id;
                    $scope.form.name_user_account_manager = objReturn.firstname + ' ' + objReturn.lastname;
                } else {
                    $scope.form.id_user_account_manager = 0;
                    $scope.form.name_user_account_manager = '';
                }
            });
        };

        $scope.removeAccountManager = function() {
            $scope.form.id_user_account_manager = 0;
            $scope.form.name_user_account_manager = '';
        };








        $scope.loadParentCompany = function () {
            zeapps_modal.loadModule("com_zeapps_contact", "search_company", {}, function(objReturn) {
                //console.log(objReturn);
                if (objReturn) {
                    $scope.form.id_parent_company = objReturn.id;
                    $scope.form.name_parent_company = objReturn.company_name;
                } else {
                    $scope.form.id_parent_company = 0;
                    $scope.form.name_parent_company = '';
                }
            });
        };

        $scope.removeParentCompany = function() {
            $scope.form.id_parent_company = 0;
            $scope.form.name_parent_company = '';
        };









        $scope.loadCodeNaf = function () {
            zeapps_modal.loadModule("com_zeapps_contact", "search_code_naf", {}, function(objReturn) {
                if (objReturn) {
                    $scope.form.code_naf = objReturn.code_naf;
                    $scope.form.code_naf_libelle = objReturn.code_naf + " - " + objReturn.libelle;
                } else {
                    $scope.form.code_naf = '';
                    $scope.form.code_naf_libelle = '';
                }
            });
        };

        $scope.removeCodeNaf = function() {
            $scope.form.code_naf = '';
            $scope.form.code_naf_libelle = '';
        };









        $scope.save = function () {
            var $data = {};

            if ($routeParams.id != 0) {
                $data.id = $routeParams.id;
            }

            $data.id_user_account_manager = $scope.form.id_user_account_manager;
            $data.name_user_account_manager = $scope.form.name_user_account_manager;
            $data.company_name = $scope.form.company_name;
            $data.id_parent_company = $scope.form.id_parent_company;
            $data.name_parent_company = $scope.form.name_parent_company;
            $data.id_type_account = $scope.form.id_type_account;
            $data.name_type_account = $scope.form.name_type_account;
            $data.id_activity_area = $scope.form.id_activity_area;
            $data.name_activity_area = $scope.form.name_activity_area;
            $data.turnover = $scope.form.turnover;
            $data.billing_address_1 = $scope.form.billing_address_1;
            $data.billing_address_2 = $scope.form.billing_address_2;
            $data.billing_address_3 = $scope.form.billing_address_3;
            $data.billing_city = $scope.form.billing_city;
            $data.billing_zipcode = $scope.form.billing_zipcode;
            $data.billing_state = $scope.form.billing_state;
            $data.billing_country_id = $scope.form.billing_country_id;
            $data.billing_country_name = $scope.form.billing_country_name;
            $data.delivery_address_1 = $scope.form.delivery_address_1;
            $data.delivery_address_2 = $scope.form.delivery_address_2;
            $data.delivery_address_3 = $scope.form.delivery_address_3;
            $data.delivery_city = $scope.form.delivery_city;
            $data.delivery_zipcode = $scope.form.delivery_zipcode;
            $data.delivery_state = $scope.form.delivery_state;
            $data.delivery_country_id = $scope.form.delivery_country_id;
            $data.delivery_country_name = $scope.form.delivery_country_name;
            $data.comment = $scope.form.comment;
            $data.phone = $scope.form.phone;
            $data.fax = $scope.form.fax;
            $data.website_url = $scope.form.website_url;
            $data.code_naf = $scope.form.code_naf;
            $data.code_naf_libelle = $scope.form.code_naf_libelle;
            $data.company_number = $scope.form.company_number;
            $data.accounting_number = $scope.form.accounting_number;


            $http.post('/com_zeapps_contact/companies/save', $data).then(function (obj) {
                // pour que la page puisse être redirigé
                if ($routeParams.url_retour) {
                    $location.path($routeParams.url_retour.replace(charSepUrlSlashRegExp,"/"));
                } else {
                    $location.path("/ng/com_zeapps_contact/companies");
                }
            });
        }

        $scope.cancel = function () {
            if ($routeParams.url_retour) {
                $location.path($routeParams.url_retour.replace(charSepUrlSlashRegExp,"/"));
            } else {
                $location.path("/ng/com_zeapps_contact/companies");
            }
        }

    }]);
app.controller('ComZeappsContactCompaniesListCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', '$uibModal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, $uibModal) {

        $scope.$parent.loadMenu("com_ze_apps_sales", "com_zeapps_sales_company");



        var loadList = function () {
            var options = {};
            $http.post('/com_zeapps_contact/companies/getAll', options).then(function (response) {
                if (response.status == 200) {
                    $scope.companies = response.data ;

                    // stock la liste des compagnies pour la navigation par fleche
                    $rootScope.companies_search_list = response.data ;
                }
            });
        };
        loadList() ;



        $scope.delete = function (argIdUser) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous supprimer définitivement cette entreprise ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la suppression';
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {
                    $http.get('/com_zeapps_contact/companies/delete/' + argIdUser).then(function (response) {
                        if (response.status == 200) {
                            loadList() ;
                        }
                    });
                }

            }, function () {
                //console.log("rien");
            });

        };


    }]);
// declare the modal to the app service
listModuleModalFunction.push({
    module_name:'com_zeapps_contact',
    function_name:'search_company',
    templateUrl:'/com_zeapps_contact/companies/modal_company',
    controller:'ZeAppsContactsModalCompanyCtrl',
    size:'lg',
    resolve:{
        titre: function () {
            return 'Recherche d\'une entreprise';
        }
    }
});


app.controller('ZeAppsContactsModalCompanyCtrl', function($scope, $uibModalInstance, $http, titre, option) {
    $scope.titre = titre ;


    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };



    var loadList = function () {
        var options = {};
        $http.post('/com_zeapps_contact/companies/getAll', options).then(function (response) {
            if (response.status == 200) {
                $scope.companies = response.data ;
            }
        });
    };
    loadList() ;


    $scope.loadCompany = function (id_company) {

        // search the company
        var company = false ;
        for (var i = 0 ; i < $scope.companies.length ; i++) {
            if ($scope.companies[i].id == id_company) {
                company = $scope.companies[i] ;
                break;
            }
        }

        $uibModalInstance.close(company);
    }

}) ;
app.config(['$routeProvider',
    function ($routeProvider) {
        $routeProvider
            .when('/ng/com_zeapps_contact/companies', {
                templateUrl: '/com_zeapps_contact/companies/search',
                controller: 'ComZeappsContactCompaniesListCtrl'
            })



            .when('/ng/com_zeapps_contact/companies/:id', {
                templateUrl: '/com_zeapps_contact/companies/view',
                controller: 'ComZeappsContactCompaniesViewCtrl'
            })




            .when('/ng/com_zeapps_contact/companies/new', {
                templateUrl: '/com_zeapps_contact/companies/form',
                controller: 'ComZeappsContactCompaniesFormListCtrl'
            })
            .when('/ng/com_zeapps_contact/companies/new/retour/:url_retour', {
                templateUrl: '/com_zeapps_contact/companies/form',
                controller: 'ComZeappsContactCompaniesFormListCtrl'
            })






            .when('/ng/com_zeapps_contact/companies/:id/edit', {
                templateUrl: '/com_zeapps_contact/companies/form',
                controller: 'ComZeappsContactCompaniesFormListCtrl'
            })
            .when('/ng/com_zeapps_contact/companies/:id/edit/retour/:url_retour', {
                templateUrl: '/com_zeapps_contact/companies/form',
                controller: 'ComZeappsContactCompaniesFormListCtrl'
            })

        ;
    }]);


app.controller('ComZeappsContactCompaniesViewCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', 'zeapps_modal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, zeapps_modal) {

        $scope.$parent.loadMenu("com_ze_apps_sales", "com_zeapps_sales_company");



        /******* gestion de la tabs *********/
        $scope.navigationState = 'summary';
        if ($rootScope.comZeappsContactLastShowTabEntreprise) {
            $scope.navigationState = $rootScope.comZeappsContactLastShowTabEntreprise ;
        }

        // pour détecter les changements sur le models
        $scope.$watch('navigationState', function(scope){
            $rootScope.comZeappsContactLastShowTabEntreprise = $scope.navigationState ;
        }, true);
        /******* FIN : gestion de la tabs *********/




        $scope.form = [];

        // charge la fiche
        if ($routeParams.id && $routeParams.id != 0) {
            $http.get('/com_zeapps_contact/companies/get/' + $routeParams.id).then(function (response) {
                if (response.status == 200) {
                    $scope.form = response.data;
                }
            });
        }

        // calcul le nombre de résultat
        $scope.nb_companies = $rootScope.companies_search_list.length ;


        // calcul la position du résultat actuel
        $scope.companie_order = 0 ;
        $scope.company_first = 0 ;
        $scope.company_previous = 0 ;
        $scope.company_next = 0 ;
        $scope.company_last = 0 ;

        for (var i = 0 ; i < $rootScope.companies_search_list.length ; i++) {
            if ($rootScope.companies_search_list[i].id == $routeParams.id) {
                $scope.companie_order = i + 1 ;
                if (i > 0) {
                    $scope.company_previous = $rootScope.companies_search_list[i-1].id ;
                }

                if ((i+1) < $rootScope.companies_search_list.length) {
                    $scope.company_next = $rootScope.companies_search_list[i+1].id ;
                }
            }
        }

        // recherche la première companie de la liste
        if ($rootScope.companies_search_list[0].id != $routeParams.id) {
            $scope.company_first = $rootScope.companies_search_list[0].id ;
        }

        // recherche la dernière companie de la liste
        if ($rootScope.companies_search_list[$rootScope.companies_search_list.length-1].id != $routeParams.id) {
            $scope.company_last = $rootScope.companies_search_list[$rootScope.companies_search_list.length-1].id ;
        }



        $scope.first_company = function () {
            if ($scope.company_first != 0) {
                $location.path("/ng/com_zeapps_contact/companies/" + $scope.company_first);
            }
        };
        $scope.previous_company = function () {
            if ($scope.company_previous != 0) {
                $location.path("/ng/com_zeapps_contact/companies/" + $scope.company_previous);
            }
        };
        $scope.next_company = function () {
            if ($scope.company_next) {
                $location.path("/ng/com_zeapps_contact/companies/" + $scope.company_next);
            }
        };
        $scope.last_company = function () {
            if ($scope.company_last) {
                $location.path("/ng/com_zeapps_contact/companies/" + $scope.company_last);
            }
        };



        $scope.edit = function () {
            var urlRetour = "/ng/com_zeapps_contact/companies/" + $routeParams.id ;

            $location.path("/ng/com_zeapps_contact/companies/" + $routeParams.id + "/edit/retour/" + encodeURI(urlRetour.replace(/\//g,charSepUrlSlash)));
        };

        $scope.cancel = function () {
            $location.path("/ng/com_zeapps_contact/companies");
        };




    }]);
app.controller('ComZeappsContactContactsFormListCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', 'zeapps_modal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, zeapps_modal) {

        $scope.$parent.loadMenu("com_ze_apps_sales", "com_zeapps_sales_contact");


        $scope.form = [];

        // charge la fiche
        if ($routeParams.id && $routeParams.id != 0) {
            $http.get('/com_zeapps_contact/contacts/get/' + $routeParams.id).then(function (response) {
                if (response.status == 200) {
                    $scope.form = response.data;
                }
            });
        }








        $scope.loadAccountManager = function () {
            zeapps_modal.loadModule("com_zeapps_core", "search_user", {}, function(objReturn) {
                if (objReturn) {
                    $scope.form.id_user_account_manager = objReturn.id;
                    $scope.form.name_user_account_manager = objReturn.firstname + ' ' + objReturn.lastname;
                } else {
                    $scope.form.id_user_account_manager = 0;
                    $scope.form.name_user_account_manager = '';
                }
            });
        };

        $scope.removeAccountManager = function() {
            $scope.form.id_user_account_manager = 0;
            $scope.form.name_user_account_manager = '';
        };










        $scope.loadCompany = function () {
            zeapps_modal.loadModule("com_zeapps_contact", "search_company", {}, function(objReturn) {
                //console.log(objReturn);
                if (objReturn) {
                    $scope.form.id_company = objReturn.id;
                    $scope.form.name_company = objReturn.company_name;
                } else {
                    $scope.form.id_company = 0;
                    $scope.form.name_company = '';
                }
            });
        };

        $scope.removeCompany = function() {
            $scope.form.id_company = 0;
            $scope.form.name_company = '';
        };







        $scope.save = function () {
            var $data = {} ;

            if ($routeParams.id != 0) {
                $data.id = $routeParams.id;
            }

            $data.id_user_account_manager = $scope.form.id_user_account_manager ;
            $data.name_user_account_manager = $scope.form.name_user_account_manager ;
            $data.id_company = $scope.form.id_company ;
            $data.name_company = $scope.form.name_company ;
            $data.title_name = $scope.form.title_name ;
            $data.first_name = $scope.form.first_name ;
            $data.last_name = $scope.form.last_name ;
            $data.email = $scope.form.email ;
            $data.phone = $scope.form.phone ;
            $data.other_phone = $scope.form.other_phone ;
            $data.mobile = $scope.form.mobile ;
            $data.fax = $scope.form.fax ;
            $data.assistant = $scope.form.assistant ;
            $data.assistant_phone = $scope.form.assistant_phone ;
            $data.department = $scope.form.department ;
            $data.job = $scope.form.job ;
            $data.email_opt_out = $scope.form.email_opt_out ;
            $data.skype_id = $scope.form.skype_id ;
            $data.twitter = $scope.form.twitter ;
            if($scope.form.date_of_birth) {
                var y = $scope.form.date_of_birth.getFullYear();
                var M = $scope.form.date_of_birth.getMonth();
                var d = $scope.form.date_of_birth.getDate();

                var date = new Date(Date.UTC(y, M, d));

                $data.date_of_birth = date;
            }
            $data.address_1 = $scope.form.address_1 ;
            $data.address_2 = $scope.form.address_2 ;
            $data.address_3 = $scope.form.address_3 ;
            $data.city = $scope.form.city ;
            $data.zipcode = $scope.form.zipcode ;
            $data.state = $scope.form.state ;
            $data.country_id = $scope.form.country_id ;
            $data.country_name = $scope.form.country_lang_name ;
            $data.comment = $scope.form.comment ;
            $data.website_url = $scope.form.website_url ;
            $data.accounting_number = $scope.form.accounting_number ;


            $http.post('/com_zeapps_contact/contacts/save', $data).then(function (obj) {
                // pour que la page puisse être redirigé
                $location.path("/ng/com_zeapps_contact/contacts");
            });
        }

        $scope.cancel = function () {
            $location.path("/ng/com_zeapps_contact/contacts");
        }



        $scope.loadCountryLang = function () {
            zeapps_modal.loadModule("com_zeapps_contact", "search_country_lang", {}, function (objReturn) {

                $scope.form.country_lang_name = objReturn.name;
                $scope.form.country_id = objReturn.id_country;

            });
        };

        $scope.removeCountryLang = function() {
            $scope.form.country_lang_name = '';

        };

    }]);
app.controller('ComZeappsContactContactsListCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', '$uibModal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, $uibModal) {

        $scope.$parent.loadMenu("com_ze_apps_sales", "com_zeapps_sales_contact");



        var loadList = function () {
            var options = {};
            $http.post('/com_zeapps_contact/contacts/getAll', options).then(function (response) {
                if (response.status == 200) {
                    $scope.contacts = response.data ;
                }
            });
        };
        loadList() ;



        $scope.delete = function (argIdUser) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous supprimer définitivement ce contact ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la suppression';
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {
                    $http.get('/com_zeapps_contact/contacts/delete/' + argIdUser).then(function (response) {
                        if (response.status == 200) {
                            loadList() ;
                        }
                    });
                }

            }, function () {
                //console.log("rien");
            });

        };


    }]);
app.config(['$routeProvider',
    function ($routeProvider) {
        $routeProvider
            .when('/ng/com_zeapps_contact/contacts', {
                templateUrl: '/com_zeapps_contact/contacts/search',
                controller: 'ComZeappsContactContactsListCtrl'
            })
            .when('/ng/com_zeapps_contact/contacts/new', {
                templateUrl: '/com_zeapps_contact/contacts/form',
                controller: 'ComZeappsContactContactsFormListCtrl'
            })
            .when('/ng/com_zeapps_contact/contacts/:id', {
                templateUrl: '/com_zeapps_contact/contacts/form',
                controller: 'ComZeappsContactContactsFormListCtrl'
            })

        ;
    }]);


// declare the modal to the app service
listModuleModalFunction.push({
    module_name:'com_zeapps_contact',
    function_name:'search_country_lang',
    templateUrl:'/com_zeapps_contact/country_lang/modal_country_lang',
    controller:'ZeAppsContactsModalCountryLangCtrl',
    size:'lg',
    resolve:{
        titre: function () {
            return 'Recherche d\'un Pays';
        }
    }
});


app.controller('ZeAppsContactsModalCountryLangCtrl', function($scope, $uibModalInstance, $http, titre, option) {
    $scope.titre = titre ;


    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };



    var loadList = function () {
        var options = {};
        $http.post('/com_zeapps_contact/country_lang/getAll', options).then(function (response) {
            if (response.status == 200) {
                $scope.country_lang = response.data ;
            }
        });
    };
    loadList() ;


    $scope.loadCountryLang = function (country_lang_id) {


        var country_lang = false ;
        for (var i = 0 ; i < $scope.country_lang.length ; i++) {
            if ($scope.country_lang[i].id_country == country_lang_id) {
                country_lang = $scope.country_lang[i] ;
                break;
            }
        }

        $uibModalInstance.close(country_lang);
    }

}) ;
app.controller('ComZeappsCrmProductDetailsCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', 'zeapps_modal', 'zeapps_productFactory',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, zeapps_modal, zeapps_productFactory) {

        $scope.$parent.loadMenu("com_ze_apps_sales", "com_zeapps_crm_product");

        $scope.error = "";

        if($routeParams.id && $routeParams.id > 0) {
            zeapps_productFactory.get.product($routeParams.id).then(function (response) {
                if (response.status == 200) {
                    if (typeof(response.data.error) === 'undefined') {
                        $scope.product = response.data;
                        zeapps_productFactory.get.category($scope.product.category).then(function (response) {
                            if (response.status == 200) {
                                if (typeof(response.data.error) === 'undefined') {
                                    $scope.category = response.data;
                                }
                                else {
                                    $scope.error = response.data.error;
                                }
                            }
                        });
                    }
                    else {
                        $scope.error = response.data.error;
                    }
                }
            });
        }
    }]);
app.factory('zeapps_productFactory', ['$http',
    function ($http) {
        var get_categories_tree = function(){
            return $http.get('/com_zeapps_crm/product/get_categories_tree');
        };
        var get_category = function(id){
            return $http.get('/com_zeapps_crm/product/get_category/'+id);
        };
        var save_category = function(data){
            return $http.post('/com_zeapps_crm/product/save_category', data);
        };
        var update_category_order = function(data){
            return $http.post('/com_zeapps_crm/product/update_categories_order', data);
        };
        var delete_category = function(id){
            return $http.post('/com_zeapps_crm/product/delete_category/'+id);
        };
        var force_delete_category = function(id){
            return $http.post('/com_zeapps_crm/product/delete_category/'+id+'/true');
        };
        var safe_delete_category = function(id){
            return $http.post('/com_zeapps_crm/product/delete_category/'+id+'/false');
        };
        var get_product = function(id){
            return $http.get('/com_zeapps_crm/product/get_product/'+id);
        };
        var get_products_of = function(id){
            return $http.get('/com_zeapps_crm/product/getProductsOf/'+id);
        };
        var save_product = function(data){
            return $http.post('/com_zeapps_crm/product/save_product', data);
        };
        var delete_product = function(id){
            return $http.post('/com_zeapps_crm/product/delete_product/'+id);
        };

        var recursiveOpening = function(branch, id){
            if(angular.isArray(branch.branches)){
                for(var i = 0; i < branch.branches.length; i++){
                    if(recursiveOpening(branch.branches[i], id)){
                        branch.open = true;
                        return true;
                    }
                }
            }
            if(branch.id == id){
                return true;
            }
            else{
                return false;
            }
            return false;
        };

        return {
            get: {
                tree: get_categories_tree,
                category: get_category,
                product: get_product,
                products_of: get_products_of
            },
            save: {
                category: save_category,
                product: save_product
            },
            update: {
                category_order: update_category_order
            },
            delete: {
                category: delete_category,
                product: delete_product
            },
            safe_delete: {
                category: safe_delete_category
            },
            force_delete: {
                category: force_delete_category
            },
            openTree: recursiveOpening
        }

    }]);
app.controller('ComZeappsCrmProductFormCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', '$uibModal', 'zeapps_modal', 'zeapps_productFactory',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, $uibModal, zeapps_modal, zeapps_productFactory) {

        $scope.$parent.loadMenu("com_ze_apps_sales", "com_zeapps_crm_product");

        $scope.activeCategory = {
            data: ''
        };

        $scope.tree = {
            branches: []
        };

        $scope.form = [];

        $scope.error = '';

        $scope.max_length = {
            desc_short: 140,
            desc_long: 1000
        };

        if ($routeParams.id && $routeParams.id > 0) {
            zeapps_productFactory.get.tree().then(function (response) {
                if (response.status == 200) {
                    $scope.tree.branches = response.data;
                    zeapps_productFactory.get.product($routeParams.id).then(function (response) {
                        if (response.status == 200) {
                            $scope.form = response.data;
                            $scope.form.price = parseFloat($scope.form.price);
                            zeapps_productFactory.openTree($scope.tree, $scope.form.category);
                            zeapps_productFactory.get.category($scope.form.category).then(function (response) {
                                if (response.status == 200) {
                                    $scope.activeCategory.data = response.data;
                                }
                            });
                        }
                    });
                }
            });
        }

        if ($routeParams.category) {
            zeapps_productFactory.get.tree().then(function (response) {
                if (response.status == 200) {
                    $scope.tree.branches = response.data;
                    zeapps_productFactory.openTree($scope.tree, $routeParams.category);
                    zeapps_productFactory.get.category($routeParams.category).then(function (response) {
                        if (response.status == 200) {
                            $scope.activeCategory.data = response.data;
                        }
                    });
                }
            });
        }

        if ($routeParams.id_delete) {
            zeapps_productFactory.get.tree().then(function (response) {
                if (response.status == 200) {
                    $scope.tree.branches = response.data;
                    zeapps_productFactory.get.product($routeParams.id_delete).then(function (response) {
                        if (response.status == 200) {
                            $scope.form = response.data;
                            $scope.form.price = parseFloat($scope.form.price);
                            zeapps_productFactory.openTree($scope.tree, $scope.form.category);
                            zeapps_productFactory.get.category($scope.form.category).then(function (response) {
                                if (response.status == 200) {
                                    $scope.activeCategory.data = response.data;
                                    $scope.delete($routeParams.id_delete);
                                }
                            });
                        }
                    });
                }
            });
        }

        $scope.$watch('activeCategory.data', function(value, old, scope){
            if(typeof(value.id) !== 'undefined'){
                scope.form.category = value.id;
            }
        });

        $scope.descState = function(current, max){
            if(current > max)
                return 'text-danger';
            else if(current > Math.ceil(max*0.9) && current < max)
                return 'text-warning';
            else
                return 'text-success';

        };

        $scope.delete = function (id) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous supprimer définitivement ce produit ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la suppression';
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {
                    zeapps_productFactory.delete.product(id).then(function (response) {
                        if (response.status == 200) {
                            // pour que la page puisse être redirigé
                            if ($routeParams.url_retour) {
                                $location.path($routeParams.url_retour.replace(charSepUrlSlashRegExp, "/"));
                            } else {
                                $location.path("/ng/com_zeapps_crm/product/category/" + $scope.form.category);
                            }
                        }
                    });
                }

            }, function () {
                //console.log("rien");
            });

        };

        $scope.save = function () {
            var data = {};

            if ($routeParams.id != 0) {
                data.id = $routeParams.id;
            }

            data.name = $scope.form.name;
            data.category = $scope.form.category;
            data.desc_short = $scope.form.desc_short;
            data.price = $scope.form.price;
            data.taxe = $scope.form.taxe;
            data.account = $scope.form.account;
            data.desc_long = $scope.form.desc_long;

            zeapps_productFactory.save.product(data).then(function (response) {
                if(typeof(response.data.error) === 'undefined') {
                    // pour que la page puisse être redirigé
                    if ($routeParams.url_retour) {
                        $location.path($routeParams.url_retour.replace(charSepUrlSlashRegExp, "/"));
                    } else {
                        $location.path("/ng/com_zeapps_crm/product/category/" + $scope.form.category);
                    }
                }
                else{
                    $scope.error = response.data.error;
                }
            });
        };

        $scope.cancel = function () {
            if ($routeParams.url_retour) {
                $location.path($routeParams.url_retour.replace(charSepUrlSlashRegExp,"/"));
            } else {
                $location.path("/ng/com_zeapps_crm/product/category/" + $scope.form.category);
            }
        };
    }]);
app.controller('ComZeappsCrmProductFormCategoryCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', '$uibModal', 'zeapps_productFactory',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, $uibModal, zeapps_productFactory) {

        $scope.$parent.loadMenu("com_ze_apps_sales", "com_zeapps_crm_product");

        $scope.activeCategory = {
            data: ''
        };

        $scope.tree = {
            branches: []
        };

        $scope.form = [];

        $scope.error = '';

        if ($routeParams.id && $routeParams.id > 0) {
            zeapps_productFactory.get.tree().then(function (response) {
                if (response.status == 200) {
                    $scope.tree.branches = response.data;
                    zeapps_productFactory.get.category($routeParams.id).then(function (response) {
                        if (response.status == 200) {
                            $scope.form = response.data;
                            zeapps_productFactory.get.category($scope.form.id_parent).then(function (response) {
                                if (response.status == 200) {
                                    $scope.activeCategory.data = response.data;
                                    zeapps_productFactory.openTree($scope.tree, $scope.activeCategory.data.id);
                                }
                            });
                        }
                    });
                }
            });
        }

        if($routeParams.id_parent && $routeParams.id_parent >= 0){
            zeapps_productFactory.get.tree().then(function (response) {
                if (response.status == 200) {
                    $scope.tree.branches = response.data;
                    zeapps_productFactory.openTree($scope.tree, $routeParams.id_parent);
                    zeapps_productFactory.get.category($routeParams.id_parent).then(function (response) {
                        if (response.status == 200) {
                            $scope.activeCategory.data = response.data;
                        }
                    });
                }
            });
        }

        if ($routeParams.id_delete && $routeParams.id_delete > 0) {
            zeapps_productFactory.get.tree().then(function (response) {
                if (response.status == 200) {
                    $scope.tree.branches = response.data;
                    zeapps_productFactory.get.category($routeParams.id_delete).then(function (response) {
                        if (response.status == 200) {
                            $scope.form = response.data;
                            zeapps_productFactory.get.category($scope.form.id_parent).then(function (response) {
                                if (response.status == 200) {
                                    $scope.activeCategory.data = response.data;
                                    zeapps_productFactory.openTree($scope.tree, $scope.activeCategory.data.id);
                                    $scope.delete($routeParams.id_delete);
                                }
                            });
                        }
                    });
                }
            });
        }

        $scope.$watch('activeCategory.data', function(value, old, scope){
            if(typeof(value.id) !== 'undefined'){
                scope.form.id_parent = value.id;
            }
        });

        $scope.delete = function (id) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous supprimer définitivement cette catégorie ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la suppression';
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {
                    zeapps_productFactory.delete.category(id).then(function (response) {
                        if (response.status == 200) {
                            if(typeof(response.data.error) === 'undefined'){
                                if(response.data.hasProducts){
                                    $scope.force_delete(id);
                                }
                            }
                            else{
                                $scope.error = response.data.error;
                            }
                        }
                    });
                }

            }, function () {
                //console.log("rien");
            });

        };

        $scope.force_delete = function (id) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'La catégorie ou l\'une de ses sous-catégories possedent toujours des produits. Si vous confirmez la suppresion les produits seront archivés.';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return 'Archiver les produits & supprimer la catégorie';
                    },
                    action_success: function () {
                        return 'Supprimer les produits & supprimer la catégorie';
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'primary') {
                    zeapps_productFactory.safe_delete.category(id).then(function (response) {
                        if (response.status == 200) {
                            if(typeof(response.data.error) === 'undefined'){
                                // pour que la page puisse être redirigé
                                if ($routeParams.url_retour) {
                                    $location.path($routeParams.url_retour.replace(charSepUrlSlashRegExp, "/"));
                                } else {
                                    $location.path("/ng/com_zeapps_crm/product/");
                                }
                            }
                            else{
                                $scope.error = response.data.error;
                            }
                        }
                    });
                } else if (selectedItem.action == 'success') {
                    zeapps_productFactory.force_delete.category(id).then(function (response) {
                        if (response.status == 200) {
                            if(typeof(response.data.error) === 'undefined'){
                                // pour que la page puisse être redirigé
                                if ($routeParams.url_retour) {
                                    $location.path($routeParams.url_retour.replace(charSepUrlSlashRegExp, "/"));
                                } else {
                                    $location.path("/ng/com_zeapps_crm/product/");
                                }
                            }
                            else{
                                $scope.error = response.data.error;
                            }
                        }
                    });
                }

            }, function () {
                //console.log("rien");
            });

        };

        $scope.save = function () {
            var data = {};

            if ($routeParams.id != 0) {
                data.id = $routeParams.id;
            }

            data.name = $scope.form.name;
            data.id_parent = $scope.form.id_parent;

            zeapps_productFactory.save.category(data).then(function (response) {
                if(typeof(response.data.error) === 'undefined') {
                    // pour que la page puisse être redirigé
                    if ($routeParams.url_retour) {
                        $location.path($routeParams.url_retour.replace(charSepUrlSlashRegExp, "/"));
                    } else {
                        $location.path("/ng/com_zeapps_crm/product/category/" + $scope.form.id_parent);
                    }
                }
                else{
                    $scope.error = response.data.error;
                }
            });
        };

        $scope.cancel = function () {
            if ($routeParams.url_retour) {
                $location.path($routeParams.url_retour.replace(charSepUrlSlashRegExp,"/"));
            } else {
                $location.path("/ng/com_zeapps_crm/product/category/" + $scope.form.id_parent);
            }
        };

    }]);
app.config(['$routeProvider',
    function ($routeProvider) {
        $routeProvider
            .when('/ng/com_zeapps_crm/product/', {
                templateUrl: '/com_zeapps_crm/product/view',
                controller: 'ComZeappsCrmProductViewCtrl'
            })

            .when('/ng/com_zeapps_crm/product/category/:id', {
                templateUrl: '/com_zeapps_crm/product/view',
                controller: 'ComZeappsCrmProductViewCtrl'
            })

            .when('/ng/com_zeapps_crm/product/:id', {
                templateUrl: '/com_zeapps_crm/product/details',
                controller: 'ComZeappsCrmProductDetailsCtrl'
            })

            .when('/ng/com_zeapps_crm/product/:id/edit', {
                templateUrl: '/com_zeapps_crm/product/form',
                controller: 'ComZeappsCrmProductFormCtrl'
            })

            .when('/ng/com_zeapps_crm/product/:id_delete/delete', {
                templateUrl: '/com_zeapps_crm/product/form',
                controller: 'ComZeappsCrmProductFormCtrl'
            })

            .when('/ng/com_zeapps_crm/product/new_product/:category', {
                templateUrl: '/com_zeapps_crm/product/form',
                controller: 'ComZeappsCrmProductFormCtrl'
            })

            .when('/ng/com_zeapps_crm/product/new_category/:id_parent', {
                templateUrl: '/com_zeapps_crm/product/form_category',
                controller: 'ComZeappsCrmProductFormCategoryCtrl'
            })

            .when('/ng/com_zeapps_crm/product/category/:id/edit', {
                templateUrl: '/com_zeapps_crm/product/form_category',
                controller: 'ComZeappsCrmProductFormCategoryCtrl'
            })

            .when('/ng/com_zeapps_crm/product/category/:id_delete/delete', {
                templateUrl: '/com_zeapps_crm/product/form_category',
                controller: 'ComZeappsCrmProductFormCategoryCtrl'
            })
        ;
    }]);
app.directive('zeappsHappylittletree',
    function(){
        return{
            restrict: 'E',
            replace: true,
            scope: {
                tree: '=',
                activeBranch: '='
            },
            template:   '<ul class="tree list-unstyled">' +
                            '<branch ng-repeat="branch in tree" data-branch="branch" data-active-branch="activeBranch"></branch>' +
                        '</ul>'
        }
})

.directive('branch', function($compile){
    return{
        restrict: 'E',
        replace: true,
        scope: {
            branch: '=',
            activeBranch: '='
        },
        template:   "<li class='branch' ng-class='{\"open\": isOpen(), \"disabled\": !hasBranches() && !hasLeaves()}'>" +
                        "<span class='branch-name text-capitalize' ng-class='{\"bg-primary\": isCurrent(branch.id)}' ng-click='toggleBranch()'>" +
                            "<span class='glyphicon glyphicon-folder-close' aria-hidden='true' ng-hide='isOpen()'></span>" +
                            "<span class='glyphicon glyphicon-folder-open' aria-hidden='true' ng-show='isOpen()'></span>" +
                            "{{ branch.name }}" +
                        "</span>" +
                    "</li>",
        link: function(scope, element, attrs){
            if(angular.isArray(scope.branch.branches)){
                $compile("<zeapps-happylittletree data-tree='branch.branches' data-active-branch='activeBranch'></zeapps-happylittletree>")(scope, function(cloned, scope){
                    element.append(cloned);
                });
            }


            scope.toggleBranch = function(){
                scope.branch.open = !scope.branch.open;
                scope.activeBranch.data = scope.branch;
            };

            scope.hasBranches = function(){
                return angular.isArray(scope.branch.branches);
            };

            scope.hasLeaves = function(){
                return angular.isArray(scope.branch.leaves);
            };

            scope.isOpen = function(){
                return scope.branch.open;
            };

            scope.isCurrent = function(id){
                return id == scope.activeBranch.data.id;
            };
        }
    }
});
app.controller('ComZeappsCrmProductViewCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', 'zeapps_modal', 'zeapps_productFactory',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, zeapps_modal, zeapps_productFactory) {

        $scope.$parent.loadMenu("com_ze_apps_sales", "com_zeapps_crm_product");

        $scope.activeCategory = {
            data: ''
        };

        $scope.tree = {
            branches: []
        };

        $scope.quicksearch = "";

        $scope.products;

        zeapps_productFactory.get.tree().then(function (response) {
            if (response.status == 200) {
                var id = $routeParams.id || 0;
                $scope.tree.branches = response.data;
                zeapps_productFactory.openTree($scope.tree, id);
                zeapps_productFactory.get.category(id).then(function (response) {
                    if (response.status == 200) {
                        $scope.activeCategory.data = response.data;
                    }
                });
            }
        });

        $scope.sortableOptions = {
            stop: function(event, ui){
                var data = {
                    categories: []
                };
                for(var i=0; i < $scope.activeCategory.data.branches.length; i++){
                    $scope.activeCategory.data.branches[i].sort = i;
                    data.categories[i] = $scope.activeCategory.data.branches[i];
                }
                zeapps_productFactory.update.category_order(data).then(function(response){
                    if (response.status != 200) {
                        alert('There was an error when trying to access the Server, please try again ! If the problem persists contact the administrator of this website.');
                    }
                });
            }
        };

        $scope.$watch('activeCategory.data', function(value, old, scope){
            if(typeof(value.id) !== 'undefined'){
                zeapps_productFactory.get.products_of(value.id).then(function (response) {
                    if (response.status == 200) {
                        if(!angular.isArray(response.data)){
                            if(response.data != "false") {
                                scope.products = new Array(response.data);
                            }
                            else
                                scope.products = new Array();
                        }
                        else{
                            scope.products = response.data;
                        }
                    }
                });
            }
        });
    }]);
app.config(['$routeProvider',
    function ($routeProvider) {
        $routeProvider
            .when('/ng/com_zeapps_crm/quotes', {
                templateUrl: '/com_zeapps_contact/companies/search',
                controller: 'ComZeappsContactCompaniesListCtrl'
            })



            .when('/ng/com_zeapps_crm/quote/:id', {
                templateUrl: '/com_zeapps_crm/quotes/view',
                controller: 'ComZeappsCrmQuoteViewCtrl'
            })




            /*.when('/ng/com_zeapps_contact/companies/new', {
                templateUrl: '/com_zeapps_contact/companies/form',
                controller: 'ComZeappsContactCompaniesFormListCtrl'
            })
            .when('/ng/com_zeapps_contact/companies/new/retour/:url_retour', {
                templateUrl: '/com_zeapps_contact/companies/form',
                controller: 'ComZeappsContactCompaniesFormListCtrl'
            })






            .when('/ng/com_zeapps_contact/companies/:id/edit', {
                templateUrl: '/com_zeapps_contact/companies/form',
                controller: 'ComZeappsContactCompaniesFormListCtrl'
            })
            .when('/ng/com_zeapps_contact/companies/:id/edit/retour/:url_retour', {
                templateUrl: '/com_zeapps_contact/companies/form',
                controller: 'ComZeappsContactCompaniesFormListCtrl'
            })*/

        ;
    }]);


app.controller('ComZeappsCrmQuoteViewCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', 'zeapps_modal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, zeapps_modal) {

        $scope.$parent.loadMenu("com_ze_apps_sales", "com_zeapps_crm_quote");



        /******* gestion de la tabs *********/
        $scope.navigationState = 'body';
        if ($rootScope.comZeappsCrmLastShowTabQuote) {
            $scope.navigationState = $rootScope.comZeappsCrmLastShowTabQuote ;
        }

        // pour détecter les changements sur le models
        $scope.$watch('navigationState', function(scope){
            $rootScope.comZeappsCrmLastShowTabQuote = $scope.navigationState ;
        }, true);
        /******* FIN : gestion de la tabs *********/







        // calcul le nombre de résultat
        //$scope.nb_resultat = $rootScope.companies_search_list.length ;
        $scope.nb_result = 123 ;


        // calcul la position du résultat actuel
        $scope.result_order = 4 ;
        $scope.result_first = 2 ;
        $scope.result_previous = 2 ;
        $scope.result_next = 2 ;
        $scope.result_last = 2 ;

        /*
         $scope.result_order = 0 ;
         $scope.result_first = 0 ;
         $scope.result_previous = 0 ;
         $scope.result_next = 0 ;
         $scope.result_last = 0 ;


        for (var i = 0 ; i < $rootScope.companies_search_list.length ; i++) {
            if ($rootScope.companies_search_list[i].id == $routeParams.id) {
                $scope.companie_order = i + 1 ;
                if (i > 0) {
                    $scope.result_previous = $rootScope.companies_search_list[i-1].id ;
                }

                if ((i+1) < $rootScope.companies_search_list.length) {
                    $scope.result_next = $rootScope.companies_search_list[i+1].id ;
                }
            }
        }

        // recherche la première companie de la liste
        if ($rootScope.companies_search_list[0].id != $routeParams.id) {
            $scope.result_first = $rootScope.companies_search_list[0].id ;
        }

        // recherche la dernière companie de la liste
        if ($rootScope.companies_search_list[$rootScope.companies_search_list.length-1].id != $routeParams.id) {
            $scope.result_last = $rootScope.companies_search_list[$rootScope.companies_search_list.length-1].id ;
        }
         */



    }]);
var com_zeapps_project_list_status = [] ;

com_zeapps_project_list_status.push({value:0, label: 'Actif'}) ;
com_zeapps_project_list_status.push({value:99, label: 'Terminé'}) ;
com_zeapps_project_list_status.push({value:1, label: 'Reporté'}) ;
com_zeapps_project_list_status.push({value:2, label: 'Annulé'}) ;




var com_zeapps_project_list_priority = [] ;

com_zeapps_project_list_priority.push({value:0, label: 'Basse'}) ;
com_zeapps_project_list_priority.push({value:1, label: 'Normale'}) ;
com_zeapps_project_list_priority.push({value:2, label: 'Haute'}) ;
app.controller('ComZeappsProjectFormCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', 'zeapps_modal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, zeapps_modal) {

        $scope.$parent.loadMenu("com_ze_apps_project", "com_zeapps_projects_list");

        $scope.form = [];

        // charge la fiche
        if ($routeParams.id && $routeParams.id != 0) {
            $http.get('/com_zeapps_project/project/get/' + $routeParams.id).then(function (response) {
                if (response.status == 200) {
                    $scope.form = response.data;
                }
            });
        }







        $scope.loadProjectManager = function () {
            zeapps_modal.loadModule("com_zeapps_core", "search_user", {}, function(objReturn) {
                if (objReturn) {
                    $scope.form.id_user_project_manager = objReturn.id;
                    $scope.form.name_user_project_manager = objReturn.firstname + ' ' + objReturn.lastname;
                } else {
                    $scope.form.id_user_project_manager = 0;
                    $scope.form.name_user_project_manager = '';
                }
            });
        };

        $scope.removeProjectManager = function() {
            $scope.form.id_user_project_manager = 0;
            $scope.form.name_user_project_manager = '';
        };








        $scope.loadCompany = function () {
            zeapps_modal.loadModule("com_zeapps_contact", "search_company", {}, function(objReturn) {
                //console.log(objReturn);
                if (objReturn) {
                    $scope.form.id_company = objReturn.id;
                    $scope.form.company_name = objReturn.company_name;
                } else {
                    $scope.form.id_company = 0;
                    $scope.form.company_name = '';
                }
            });
        };

        $scope.removeCompany = function() {
            $scope.form.id_company = 0;
            $scope.form.company_name = '';
        };











        $scope.save = function () {
            var $data = {};

            if ($routeParams.id != 0) {
                $data.id = $routeParams.id;
            }

            $data.id_user_project_manager = $scope.form.id_user_project_manager;
            $data.name_user_project_manager = $scope.form.name_user_project_manager;
            $data.project_name = $scope.form.project_name;
            $data.id_company = $scope.form.id_company;
            $data.company_name = $scope.form.company_name;
            $data.priority = $scope.form.priority;
            $data.status = $scope.form.status;


            $http.post('/com_zeapps_project/project/save', $data).then(function (obj) {
                // pour que la page puisse être redirigé
                $location.path("/ng/com_zeapps_project/projects");
            });
        }

        $scope.cancel = function () {
            $location.path("/ng/com_zeapps_project/projects");
        }

    }]);
app.requires.push('treeGrid');


app.controller('ComZeappsProjectListCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', '$uibModal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, $uibModal) {

        $scope.$parent.loadMenu("com_ze_apps_project", "com_zeapps_projects_list");







        $scope.tree_data = [];




        $scope.col_defs = [
            {
                field: "name",
                displayName:"Nom",
                sortable:true,
                cellTemplate: "<a href=\"/ng/com_zeapps_project/project/view/{{row.branch['id']}}\">{{row.branch[col.field]}}</a>",
            },
            {
                field: "next_due",
                displayName:"Prochaine échéance"
            },
            {
                field: "nb_tasks",
                displayName:"# tâches"
            },
            {
                field: "nb_tasks_unallocated",
                displayName:"# tâches non assignées"
            },
            {
                field: "action",
                displayName:"-",
                cellTemplate: "<button type=\"button\" class=\"btn btn-primary btn-sm\" ng-hide=\"row.branch['sublevel']\" ng-click=\"cellTemplateScope.edit(row.branch['id'])\"><span class=\"glyphicon glyphicon-pencil\"></span></button> " +
                "<button type=\"button\" class=\"btn btn-primary btn-sm\" ng-hide=\"row.branch['sublevel']\" ng-click=\"cellTemplateScope.archived(row.branch['id'])\"><span class=\"glyphicon glyphicon-inbox\"></span></button> " +
                "<button type=\"button\" class=\"btn btn-danger btn-sm\" ng-hide=\"row.branch['sublevel']\" ng-click=\"cellTemplateScope.delete(row.branch['id'])\"><span class=\"glyphicon glyphicon-trash\"></span></button>",
                cellTemplateScope: {
                    edit: function(argIdProject) {         // this works too: $scope.someMethod;
                        $location.path("/ng/com_zeapps_project/project/" + argIdProject);
                    },
                    archived: function(argIdProject) {         // this works too: $scope.someMethod;
                        var modalInstance = $uibModal.open({
                            animation: true,
                            templateUrl: '/assets/angular/popupModalDeBase.html',
                            controller: 'ZeAppsPopupModalDeBaseCtrl',
                            size: 'lg',
                            resolve: {
                                titre: function () {
                                    return 'Attention';
                                },
                                msg: function () {
                                    return 'Souhaitez-vous terminer ce projet ?';
                                },
                                action_danger: function () {
                                    return 'Annuler';
                                },
                                action_primary: function () {
                                    return false;
                                },
                                action_success: function () {
                                    return 'Je confirme l\'archivage';
                                }
                            }
                        });

                        modalInstance.result.then(function (selectedItem) {
                            if (selectedItem.action == 'danger') {

                            } else if (selectedItem.action == 'success') {
                                $http.get('/com_zeapps_project/project/archived/' + argIdProject).then(function (response) {
                                    if (response.status == 200) {
                                        loadList() ;
                                    }
                                });
                            }

                        }, function () {
                            //console.log("rien");
                        });
                    },
                    delete: function(argIdProject) {         // this works too: $scope.someMethod;
                        var modalInstance = $uibModal.open({
                            animation: true,
                            templateUrl: '/assets/angular/popupModalDeBase.html',
                            controller: 'ZeAppsPopupModalDeBaseCtrl',
                            size: 'lg',
                            resolve: {
                                titre: function () {
                                    return 'Attention';
                                },
                                msg: function () {
                                    return 'Souhaitez-vous supprimer définitivement ce projet ?';
                                },
                                action_danger: function () {
                                    return 'Annuler';
                                },
                                action_primary: function () {
                                    return false;
                                },
                                action_success: function () {
                                    return 'Je confirme la suppression';
                                }
                            }
                        });

                        modalInstance.result.then(function (selectedItem) {
                            if (selectedItem.action == 'danger') {

                            } else if (selectedItem.action == 'success') {
                                $http.get('/com_zeapps_project/project/delete/' + argIdProject).then(function (response) {
                                    if (response.status == 200) {
                                        loadList() ;
                                    }
                                });
                            }

                        }, function () {
                            //console.log("rien");
                        });
                    },
                }
            },

        ];















        var reloadJTreeTable = false ;


        $scope.filter_priority = [
            {id:0, label:"Basse", value:true},
            {id:1, label:"Normale", value:true},
            {id:2, label:"Haute", value:true},
        ];


        $scope.filter_status = [
            {id:0, label:"Actif", value:true},
            {id:99, label:"Terminé", value:false},
            {id:1, label:"Reporté", value:false},
            {id:2, label:"Annulé", value:false},
        ];



        $scope.critere_affichage_1 = "2" ;
        $scope.critere_affichage_2 = "0" ;
        $scope.critere_affichage_3 = "0" ;
        $scope.critere_affichage_4 = "0" ;


        if ($rootScope.filter_search_project) {
            if ($rootScope.filter_search_project.filter_priority) {
                $scope.filter_priority = $rootScope.filter_search_project.filter_priority ;
            }
            if ($rootScope.filter_search_project.filter_status) {
                $scope.filter_status = $rootScope.filter_search_project.filter_status ;
            }
            if ($rootScope.filter_search_project.critere_affichage_1) {
                $scope.critere_affichage_1 = $rootScope.filter_search_project.critere_affichage_1 ;
            }
            if ($rootScope.filter_search_project.critere_affichage_2) {
                $scope.critere_affichage_2 = $rootScope.filter_search_project.critere_affichage_2 ;
            }
            if ($rootScope.filter_search_project.critere_affichage_3) {
                $scope.critere_affichage_3 = $rootScope.filter_search_project.critere_affichage_3 ;
            }
            if ($rootScope.filter_search_project.critere_affichage_4) {
                $scope.critere_affichage_4 = $rootScope.filter_search_project.critere_affichage_4 ;
            }
        }

        $scope.update_filter = function() {
            $rootScope.filter_search_project = {} ;
            $rootScope.filter_search_project.filter_priority = $scope.filter_priority ;
            $rootScope.filter_search_project.filter_status = $scope.filter_status ;
            $rootScope.filter_search_project.critere_affichage_1 = $scope.critere_affichage_1 ;
            $rootScope.filter_search_project.critere_affichage_2 = $scope.critere_affichage_2 ;
            $rootScope.filter_search_project.critere_affichage_3 = $scope.critere_affichage_3 ;
            $rootScope.filter_search_project.critere_affichage_4 = $scope.critere_affichage_4 ;

            if ($scope.critere_affichage_1 == 0) {
                $scope.critere_affichage_2 = "0" ;
                $scope.critere_affichage_3 = "0" ;
                $scope.critere_affichage_4 = "0" ;
            } else if ($scope.critere_affichage_2 == 0) {
                $scope.critere_affichage_3 = "0" ;
                $scope.critere_affichage_4 = "0" ;
            } else if ($scope.critere_affichage_3 == 0) {
                $scope.critere_affichage_4 = "0" ;
            }



            loadList() ;
        };





        var getTypeCritereAffichage = function (argIdCritereAffichage) {
            if (argIdCritereAffichage == "1") {
                return "status";
            } else if (argIdCritereAffichage == "2") {
                return "priority";
            } else if (argIdCritereAffichage == "3") {
                return "name_user_project_manager";
            } else if (argIdCritereAffichage == "4") {
                return "company_name";
            }
        };



        var getValueListStatus = function (argValue) {
            var val_return = "" ;

            for (var i = 0 ; i < com_zeapps_project_list_status.length ; i++) {
                if (com_zeapps_project_list_status[i].value == argValue) {
                    val_return = com_zeapps_project_list_status[i].label ;
                }
            }

            return val_return ;
        };

        var getValueListPriority= function (argValue) {
            var val_return = "" ;

            for (var i = 0 ; i < com_zeapps_project_list_priority.length ; i++) {
                if (com_zeapps_project_list_priority[i].value == argValue) {
                    val_return = "Priorité " + com_zeapps_project_list_priority[i].label ;
                }
            }

            return val_return ;
        };


        var loadList = function () {

            var critereAffichage = [] ;
            var nbCritereAffichage = 0 ;
            $scope.tree_data = [] ;



            var options = {};

            options.critere_affichage_1 = "0" ;
            options.critere_affichage_2 = "0" ;
            options.critere_affichage_3 = "0" ;
            options.critere_affichage_4 = "0" ;




            options.filter_priority = [] ;
            options.filter_status = [] ;
            options.critere_affichage_1 = $scope.critere_affichage_1 ;
            if ($scope.critere_affichage_1 != "0") {
                nbCritereAffichage++;
                critereAffichage.push(getTypeCritereAffichage($scope.critere_affichage_1)) ;
                options.critere_affichage_2 = $scope.critere_affichage_2 ;

                if ($scope.critere_affichage_2 != "0") {
                    nbCritereAffichage++;
                    critereAffichage.push(getTypeCritereAffichage($scope.critere_affichage_2)) ;
                    options.critere_affichage_3 = $scope.critere_affichage_3 ;

                    if ($scope.critere_affichage_3 != "0") {
                        nbCritereAffichage++;
                        critereAffichage.push(getTypeCritereAffichage($scope.critere_affichage_3)) ;
                        options.critere_affichage_4 = $scope.critere_affichage_4;

                        if ($scope.critere_affichage_4 != "0") {
                            nbCritereAffichage++;
                            critereAffichage.push(getTypeCritereAffichage($scope.critere_affichage_4));
                        }
                    }
                }
            }


            for (var i = 0 ; i < $scope.filter_priority.length ; i++) {
                if ($scope.filter_priority[i].value) {
                    options.filter_priority.push($scope.filter_priority[i].id) ;
                }
            }
            for (var i = 0 ; i < $scope.filter_status.length ; i++) {
                if ($scope.filter_status[i].value) {
                    options.filter_status.push($scope.filter_status[i].id) ;
                }
            }



            $http.post('/com_zeapps_project/project/getAll', options).then(function (response) {
                if (response.status == 200) {
                    $scope.projects = response.data ;

                    var idProject = "" ;
                    for (var i = 0 ; i < $scope.projects.length ; i++) {
                        if (i > 0) {
                            idProject += "," ;
                        }
                        idProject += $scope.projects[i].id ;
                    }

                    // charge les stats du projet
                    var options = {} ;
                    options.ids_project = idProject ;
                    $http.post('/com_zeapps_project/project/get_stat', options).then(function (response) {
                        if (response.status == 200) {
                            var stat_tasks = response.data ;

                            for (var i = 0 ; i < $scope.projects.length ; i++) {
                                $scope.projects[i].next_due = "" ;
                                $scope.projects[i].nb_tasks = 0 ;
                                $scope.projects[i].nb_tasks_unallocated = 0 ;
                                $scope.projects[i].over_due = false ;

                                for (var j = 0 ; j < stat_tasks.length ; j++) {
                                    if (stat_tasks[j][0] == $scope.projects[i].id) {
                                        $scope.projects[i].next_due = stat_tasks[j][2] ;
                                        $scope.projects[i].nb_tasks = stat_tasks[j][3] ;
                                        $scope.projects[i].nb_tasks_unallocated = stat_tasks[j][4] ;

                                        if (stat_tasks[j][5]) {
                                            $scope.projects[i].over_due = true ;
                                        }

                                        break;
                                    }
                                }
                            }




                            // recalcul le tableau
                            var lastValue = [] ;
                            for (var i = 0 ; i < nbCritereAffichage ; i++) {
                                lastValue[i] = "fdqf5dqsfq89f8fq59bf5fq48fds48dfqs48df48sq8qf4s" ;
                            }




                            $scope.tree_data = [];

                            var obj_niv_1 = {} ;
                            var obj_niv_2 = {} ;
                            var obj_niv_3 = {} ;
                            var obj_niv_4 = {} ;

                            for (var i = 0 ; i < $scope.projects.length ; i++) {
                                var forceLoadSubLevel = false ;
                                // test s'il y a un changement de niveau 1
                                if (nbCritereAffichage >= 1 && lastValue[0] != $scope.projects[i][critereAffichage[0]]) {
                                    lastValue[0] = $scope.projects[i][critereAffichage[0]] ;
                                    var info = lastValue[0] ;
                                    if (critereAffichage[0] == 'priority') {
                                        info = getValueListPriority($scope.projects[i][critereAffichage[0]]) ;
                                    } else if (critereAffichage[0] == 'status') {
                                        info = getValueListStatus($scope.projects[i][critereAffichage[0]]) ;
                                    }


                                    obj_niv_1 = {name:info, sublevel:"sublevel_class", expanded:true, children:[]} ;
                                    forceLoadSubLevel = true ;
                                    $scope.tree_data.push(obj_niv_1);
                                }

                                if (nbCritereAffichage >= 2 && (lastValue[1] != $scope.projects[i][critereAffichage[1]] || forceLoadSubLevel)) {
                                    lastValue[1] = $scope.projects[i][critereAffichage[1]] ;
                                    var info = lastValue[1] ;
                                    if (critereAffichage[1] == 'priority') {
                                        info = getValueListPriority($scope.projects[i][critereAffichage[1]]) ;
                                    } else if (critereAffichage[1] == 'status') {
                                        info = getValueListStatus($scope.projects[i][critereAffichage[1]]) ;
                                    }


                                    obj_niv_2 = {name:info, sublevel:"sublevel_class", expanded:true, children:[]} ;
                                    obj_niv_1.children.push(obj_niv_2);
                                }

                                if (nbCritereAffichage >= 3 && (lastValue[2] != $scope.projects[i][critereAffichage[2]] || forceLoadSubLevel)) {
                                    lastValue[2] = $scope.projects[i][critereAffichage[2]] ;
                                    var info = lastValue[2] ;
                                    if (critereAffichage[2] == 'priority') {
                                        info = getValueListPriority($scope.projects[i][critereAffichage[2]]) ;
                                    } else if (critereAffichage[2] == 'status') {
                                        info = getValueListStatus($scope.projects[i][critereAffichage[2]]) ;
                                    }


                                    obj_niv_3 = {name:info, sublevel:"sublevel_class", expanded:true, children:[]} ;
                                    obj_niv_2.children.push(obj_niv_3);
                                }

                                if (nbCritereAffichage >= 4 && (lastValue[3] != $scope.projects[i][critereAffichage[3]] || forceLoadSubLevel)) {
                                    lastValue[3] = $scope.projects[i][critereAffichage[3]] ;
                                    var info = lastValue[3] ;
                                    if (critereAffichage[3] == 'priority') {
                                        info = getValueListPriority($scope.projects[i][critereAffichage[3]]) ;
                                    } else if (critereAffichage[3] == 'status') {
                                        info = getValueListStatus($scope.projects[i][critereAffichage[3]]) ;
                                    }


                                    obj_niv_4 = {name:info, sublevel:"sublevel_class", expanded:true, children:[]} ;
                                    obj_niv_3.children.push(obj_niv_4);
                                }


                                // ajoute le contenu du projet sur le bon niveau
                                var data = {} ;
                                data.id = $scope.projects[i].id ;
                                data.name = $scope.projects[i].id ;

                                if ($scope.projects[i].company_name != '') {
                                    data.name += " - " + $scope.projects[i].company_name ;
                                }

                                if ($scope.projects[i].project_name != '') {
                                    data.name += " - " + $scope.projects[i].project_name ;
                                }

                                data.name_user_project_manager = $scope.projects[i].name_user_project_manager ;
                                data.next_due = $scope.projects[i].next_due ;
                                data.nb_tasks = $scope.projects[i].nb_tasks ;
                                data.nb_tasks_unallocated = $scope.projects[i].nb_tasks_unallocated ;

                                if (nbCritereAffichage == 0) {
                                    $scope.tree_data.push(data) ;
                                } else if (nbCritereAffichage == 1) {
                                    obj_niv_1.children.push(data) ;
                                } else if (nbCritereAffichage == 2) {
                                    obj_niv_2.children.push(data) ;
                                } else if (nbCritereAffichage == 3) {
                                    obj_niv_3.children.push(data) ;
                                } else if (nbCritereAffichage == 4) {
                                    obj_niv_4.children.push(data) ;
                                }
                            }
                        }
                    });
                }
            });
        };
        loadList() ;





        var isStatusShow = false ;
        $scope.show_status = function () {
            if (isStatusShow) {
                isStatusShow = false;
                $(".col-table-data").removeClass('col-md-9');
                $(".col-table-data").addClass('col-md-12');
                $(".col-status").hide();
            } else {
                isStatusShow = true ;
                $(".col-table-data").removeClass('col-md-12');
                $(".col-table-data").addClass('col-md-9');
                $(".col-status").show();
            }

        };
        $(".col-status").hide();






        $scope.archived = function (argIdProject) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous terminer ce projet ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme l\'archivage';
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {
                    $http.get('/com_zeapps_project/project/archived/' + argIdProject).then(function (response) {
                        if (response.status == 200) {
                            loadList() ;
                        }
                    });
                }

            }, function () {
                //console.log("rien");
            });
        };


        $scope.edit = function (argIdProject) {
            $location.path("/ng/com_zeapps_project/project/" + argIdProject);
        };


        $scope.delete = function (argIdProject) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous supprimer définitivement ce projet ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la suppression';
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {
                    $http.get('/com_zeapps_project/project/delete/' + argIdProject).then(function (response) {
                        if (response.status == 200) {
                            loadList() ;
                        }
                    });
                }

            }, function () {
                //console.log("rien");
            });

        };


    }]);
app.config(['$routeProvider',
    function ($routeProvider) {
        $routeProvider
            .when('/ng/com_zeapps_project/projects', {
                templateUrl: '/com_zeapps_project/project/search',
                controller: 'ComZeappsProjectListCtrl'
            })
            .when('/ng/com_zeapps_project/project/new', {
                templateUrl: '/com_zeapps_project/project/form',
                controller: 'ComZeappsProjectFormCtrl'
            })
            .when('/ng/com_zeapps_project/project/:id', {
                templateUrl: '/com_zeapps_project/project/form',
                controller: 'ComZeappsProjectFormCtrl'
            })
            .when('/ng/com_zeapps_project/project/view/:id', {
                templateUrl: '/com_zeapps_project/project/view',
                controller: 'ComZeappsProjectViewCtrl'
            })
        ;
    }]);


app.controller('ComZeappsProjectViewCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', 'zeapps_modal', '$uibModal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, zeapps_modal, $uibModal) {

        $scope.$parent.loadMenu("com_ze_apps_project", "com_zeapps_projects_list");



        $scope.tasks_without_sections = [] ;
        $scope.sections = [] ;





        $scope.download_pdf = function() {
            $http.get('/com_zeapps_project/pdf/task_project/' + $routeParams.id).then(function (response) {
                if (response.status == 200) {
                    window.document.location.href = '/com_zeapps_project/pdf/downloadPDF' ;
                }
            });
        } ;





        var loadListSection = function () {
            $scope.sections = [] ;

            var options = {};
            $http.post('/com_zeapps_project/section/getAll/' + $routeParams.id, options).then(function (response) {
                if (response.status == 200) {
                    $scope.sections = response.data ;
                    loadListTask() ;
                }
            });
        };
        loadListSection() ;




        var loadListTask = function () {
            $scope.tasks_without_sections = [] ;



            var options = {};
            $http.post('/com_zeapps_project/task/getAll/' + $routeParams.id, options).then(function (response) {
                if (response.status == 200) {
                    $scope.tasks = response.data ;


                    for (var i = 0 ; i < $scope.tasks.length ; i++) {
                        if ($scope.tasks[i].id_section == 0) {
                            $scope.tasks_without_sections.push($scope.tasks[i]) ;
                        }
                    }



                    // ajoute les tâches sans section
                    for (var j = 0 ; j < $scope.sections.length ; j++) {
                        $scope.sections[j].tasks = [] ;
                        $scope.sections[j].sortableOptionsTask = {
                            start: function () {
                            },
                            stop: function (e, ui) {
                                for (var i_section = 0 ; i_section < $scope.sections.length ; i_section++) {
                                    if ($scope.sections[i_section].id == $scope.selectedSectionTask) {
                                        var logEntry = $scope.sections[i_section].tasks.map(function(i){
                                            return i.id;
                                        }).join(', ');

                                        var options = {} ;
                                        options.id_project = $routeParams.id ;
                                        options.id_section = $scope.selectedSectionTask ;
                                        options.ids = logEntry ;

                                        $http.post('/com_zeapps_project/task/updateOrder', options).then(function (response) {
                                            if (response.status == 200) {
                                                loadListTask() ;
                                            }
                                        });

                                        break;
                                    }
                                }
                            },
                            update: function (e, ui) {
                            },
                            cursor: "move",
                            axis: 'y',
                            delay: 150,
                            opacity: 0.5,
                            handle: ".moveElement",
                            testNicolas:1234
                        };

                        for (var i = 0 ; i < $scope.tasks.length ; i++) {
                            if ($scope.tasks[i].id_section == $scope.sections[j].id) {
                                $scope.sections[j].tasks.push($scope.tasks[i]);
                            }
                        }
                    }

                }
            });
        };




        $scope.sortableOptionsTask = {
            start: function () {
            },
            stop: function (e, ui) {
                var logEntry = $scope.tasks_without_sections.map(function(i){
                    return i.id;
                }).join(', ');

                var options = {} ;
                options.id_project = $routeParams.id ;
                options.id_section = 0 ;
                options.ids = logEntry ;

                $http.post('/com_zeapps_project/task/updateOrder', options).then(function (response) {
                    if (response.status == 200) {
                        loadListTask() ;
                    }
                });


            },
            update: function (e, ui) {
            },
            cursor: "move",
            axis: 'y',
            delay: 150,
            opacity: 0.5,
            handle: ".moveElement",
            testNicolas:1234
        };





        $scope.selectedSectionTask = 0 ;
        $scope.startMoveTask = function(idSection) {
            $scope.selectedSectionTask = idSection;
        };




        $scope.edit_section = function(id_section) {
            $location.path("/ng/com_zeapps_project/project/" + $routeParams.id + "/section/" + id_section);
        };

        $scope.add_task = function(id_section) {
            $location.path("/ng/com_zeapps_project/project/" + $routeParams.id + "/section/" + id_section + "/task/add");
        };

        $scope.delete_section = function(id_section) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous supprimer cette section ?<br>Toutes les tâches de cette section seront également supprimées';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la suppression';
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {
                    $http.get('/com_zeapps_project/section/delete/' + id_section).then(function (response) {
                        if (response.status == 200) {
                            loadListSection();
                        }
                    });
                }

            }, function () {
                //console.log("rien");
            });
        };




        $scope.edit_task = function(id_section, id_task) {
            $location.path("/ng/com_zeapps_project/project/" + $routeParams.id + "/section/" + id_section + "/task/" + id_task);
        };

        $scope.delete_task = function(id_section, id_task) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous supprimer définitivement cette tâche ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la suppression';
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {
                    $http.get('/com_zeapps_project/task/delete/' + id_task).then(function (response) {
                        if (response.status == 200) {
                            loadListSection() ;
                        }
                    });
                }

            }, function () {
                //console.log("rien");
            });
        };




        $scope.completed_task = function(id_section, id_task) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous confirmer la fin de tâche ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la fin de tâche';
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {
                    $http.get('/com_zeapps_project/task/completed/' + id_task).then(function (response) {
                        if (response.status == 200) {
                            loadListSection() ;
                        }
                    });
                }

            }, function () {
                //console.log("rien");
            });
        };








        // pour changer l'ordre des sections
        $scope.sortableOptions = {
            start: function () {
            },
            stop: function () {
                var logEntry = $scope.sections.map(function(i){
                    return i.id;
                }).join(', ');

                var options = {} ;
                options.id_project = $routeParams.id ;
                options.ids = logEntry ;

                $http.post('/com_zeapps_project/section/updateOrder', options).then(function (response) {
                    if (response.status == 200) {
                        loadListTask() ;
                    }
                });
            },
            update: function (e, ui) {

            },
            cursor: "move",
            axis: 'y',
            delay: 150,
            opacity: 0.5,
            handle: ".moveElement"
        };













        $scope.projet = {};

        // charge la fiche
        if ($routeParams.id && $routeParams.id != 0) {
            $http.get('/com_zeapps_project/project/get/' + $routeParams.id).then(function (response) {
                if (response.status == 200) {
                    $scope.projet = response.data;
                }
            });
        }





    }]);
app.controller('ComZeappsSectionFormCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', 'zeapps_modal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, zeapps_modal) {

        $scope.$parent.loadMenu("com_ze_apps_project", "com_zeapps_projects");

        $scope.form = [];

        // load the project
        if ($routeParams.id_project && $routeParams.id_project != 0) {
            $http.get('/com_zeapps_project/project/get/' + $routeParams.id_project).then(function (response) {
                if (response.status == 200) {
                    $scope.project = response.data;
                }
            });
        }



        // charge la fiche
        if ($routeParams.id && $routeParams.id != 0) {
            $http.get('/com_zeapps_project/section/get/' + $routeParams.id).then(function (response) {
                if (response.status == 200) {
                    $scope.form = response.data;
                }
            });
        }





        $scope.save = function () {
            var $data = {};

            if ($routeParams.id != 0) {
                $data.id = $routeParams.id;
            }

            $data.id_project = $routeParams.id_project;
            $data.name = $scope.form.name;


            $http.post('/com_zeapps_project/section/save', $data).then(function (obj) {
                // pour que la page puisse être redirigé
                $location.path("/ng/com_zeapps_project/project/view/" + $routeParams.id_project);
            });
        }

        $scope.cancel = function () {
            $location.path("/ng/com_zeapps_project/project/view/" + $routeParams.id_project);
        }

    }]);
// declare the modal to the app service
listModuleModalFunction.push({
    module_name:'com_zeapps_project',
    function_name:'search_section',
    templateUrl:'/com_zeapps_project/section/modal_section',
    controller:'ZeAppsProjectsModalSectionCtrl',
    size:'lg',
    resolve:{
        titre: function () {
            return 'Recherche d\'une section';
        }
    }
});


app.controller('ZeAppsProjectsModalSectionCtrl', function($scope, $uibModalInstance, $http, titre, option) {
    $scope.titre = titre ;


    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };



    var loadList = function () {
        var options = {};
        $http.post('/com_zeapps_project/section/getAll/' + option.id_project, options).then(function (response) {
            if (response.status == 200) {
                $scope.sections = response.data ;
            }
        });
    };
    loadList() ;


    $scope.loadSection = function (id_company) {

        // search the company
        var section = false ;
        for (var i = 0 ; i < $scope.sections.length ; i++) {
            if ($scope.sections[i].id == id_company) {
                section = $scope.sections[i] ;
                break;
            }
        }

        $uibModalInstance.close(section);
    }

}) ;
app.config(['$routeProvider',
    function ($routeProvider) {
        $routeProvider
            .when('/ng/com_zeapps_project/project/:id_project/section/add', {
                templateUrl: '/com_zeapps_project/section/form',
                controller: 'ComZeappsSectionFormCtrl'
            })
            .when('/ng/com_zeapps_project/project/:id_project/section/:id', {
                templateUrl: '/com_zeapps_project/section/form',
                controller: 'ComZeappsSectionFormCtrl'
            })
        ;
    }]);


app.controller('ComZeappsProjectTaskFormCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', 'zeapps_modal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, zeapps_modal) {

        $scope.$parent.loadMenu("com_ze_apps_project", "com_zeapps_projects_list");

        $scope.form = [];
        $scope.form.due_date = null;
        $scope.section = false ;




        $scope.format = 'dd/MM/yyyy' ;
        $scope.popup2 = {
            opened: false
        };

        $scope.dateOptions = {
            dateDisabled: disabled,
            formatYear: 'yy',
            startingDay: 1
        };


        // Disable weekend selection
        function disabled(data) {
            var date = data.date,
                mode = data.mode;
            return mode === 'day' && (date.getDay() === 0 || date.getDay() === 6);
        }

        $scope.open2 = function() {
            $scope.popup2.opened = true;
        };






        // load the project
        var loadDataProject = function () {
            if ($routeParams.id_project && $routeParams.id_project != 0) {
                $http.get('/com_zeapps_project/project/get/' + $routeParams.id_project).then(function (response) {
                    if (response.status == 200) {
                        $scope.project = response.data;
                        loadDataSection();
                    }
                });
            } else {
                loadDataSection();
            }
        }






        // load the section
        var loadDataSection = function() {
            if ($routeParams.id_section && $routeParams.id_section != 0) {
                $http.get('/com_zeapps_project/section/get/' + $routeParams.id_section).then(function (response) {
                    if (response.status == 200) {
                        $scope.section = response.data;

                        $scope.form.id_section = $scope.section.id;
                        $scope.form.section_name = $scope.section.name;
                    }
                });
            }
        }









        // charge la fiche
        var loadDataTask = function() {
            if ($routeParams.id && $routeParams.id != 0) {
                $http.get('/com_zeapps_project/task/get/' + $routeParams.id).then(function (response) {
                    if (response.status == 200) {
                        $scope.form = response.data;

                        if ($scope.form.due_date == "0000-00-00") {
                            $scope.form.due_date = null ;
                        } else {
                            $scope.form.due_date = new Date($scope.form.due_date);
                        }

                        loadDataProject() ;
                    }
                });
            } else {
                loadDataProject() ;
            }
        }
        loadDataTask() ;







        $scope.loadSection = function () {
            zeapps_modal.loadModule("com_zeapps_project", "search_section", {id_project:$routeParams.id_project}, function(objReturn) {
                if (objReturn) {
                    $scope.form.id_section = objReturn.id;
                    $scope.form.section_name = objReturn.name;
                } else {
                    $scope.form.id_section = 0;
                    $scope.form.section_name = '';
                }
            });
        };

        $scope.removeSection = function() {
            $scope.form.id_section = 0;
            $scope.form.section_name = '';
        };






        $scope.loadAssignedTo = function () {
            zeapps_modal.loadModule("com_zeapps_core", "search_user", {}, function(objReturn) {
                if (objReturn) {
                    $scope.form.id_assigned_to = objReturn.id;
                    $scope.form.name_assigned_to = objReturn.firstname + ' ' + objReturn.lastname;
                } else {
                    $scope.form.id_assigned_to = 0;
                    $scope.form.name_assigned_to = '';
                }
            });
        };

        $scope.removeAssignedTo = function() {
            $scope.form.id_assigned_to = 0;
            $scope.form.name_assigned_to = '';
        };









        $scope.save = function () {
            var $data = {};

            if ($routeParams.id != 0) {
                $data.id = $routeParams.id;
            }

            $data.id_project = $routeParams.id_project;
            $data.id_section = $scope.form.id_section;
            $data.title = $scope.form.title;
            $data.description = $scope.form.description;
            $data.progress = $scope.form.progress;
            $data.due_date = getDateMysql($scope.form.due_date);
            $data.id_assigned_to = $scope.form.id_assigned_to;
            $data.name_assigned_to = $scope.form.name_assigned_to;
            if ($scope.form.estimated_time_hours) {
                $data.estimated_time_hours = arrondi2Chiffres($scope.form.estimated_time_hours);
            } else {
                $data.estimated_time_hours = 0;
            }



            $http.post('/com_zeapps_project/task/save', $data).then(function (obj) {
                // pour que la page puisse être redirigé
                $location.path("/ng/com_zeapps_project/project/view/" + $routeParams.id_project);
            });
        }

        $scope.cancel = function () {
            $location.path("/ng/com_zeapps_project/project/view/" + $routeParams.id_project);
        }



        var getDateMysql = function(date) {
            var dateMysql = '0000-00-00';
            if (date) {
                dateMysql = date.getFullYear() + '-' +
                    ('00' + (date.getMonth() + 1)).slice(-2) + '-' +
                    ('00' + date.getDate()).slice(-2) ;
            }
            return dateMysql ;
        }


        var getNumber = function (value) {
            if (isNaN(value)) {
                value = value.replace(",", ".");
            }
            return value * 1 ;
        };

        var arrondi2Chiffres = function (value) {
            value = getNumber(value);
            return Math.round(value*100)/100;
        }



    }]);
app.controller('ComZeappsProjectMyTaskCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', 'zeapps_modal', '$uibModal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, zeapps_modal, $uibModal) {

        $scope.$parent.loadMenu("com_ze_apps_project", "com_zeapps_projects_my_task");



        $scope.projets = [];




        // charge la fiche
        var loadTask = function () {
            $http.get('/com_zeapps_project/task/getmytask/').then(function (response) {
                if (response.status == 200) {
                    if (response.data == 'false') {
                        $scope.projets = [];
                    } else {
                        $scope.projets = response.data;
                    }
                }
            });
        };
        loadTask() ;











        $scope.edit_task = function(id_project, id_section, id_task) {
            $location.path("/ng/com_zeapps_project/project/" + id_project + "/section/" + id_section + "/task/" + id_task);
        };

        $scope.delete_task = function(id_section, id_task) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous supprimer définitivement cette tâche ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la suppression';
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {
                    $http.get('/com_zeapps_project/task/delete/' + id_task).then(function (response) {
                        if (response.status == 200) {
                            loadTask() ;
                        }
                    });
                }

            }, function () {
                //console.log("rien");
            });
        };




        $scope.completed_task = function(id_section, id_task) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous confirmer la fin de tâche ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la fin de tâche';
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {
                    $http.get('/com_zeapps_project/task/completed/' + id_task).then(function (response) {
                        if (response.status == 200) {
                            loadTask() ;
                        }
                    });
                }

            }, function () {
                //console.log("rien");
            });
        };




    }]);
app.config(['$routeProvider',
    function ($routeProvider) {
        $routeProvider
            .when('/ng/com_zeapps_project/project/:id_project/section/:id_section/task/add', {
                templateUrl: '/com_zeapps_project/task/form',
                controller: 'ComZeappsProjectTaskFormCtrl'
            })
            .when('/ng/com_zeapps_project/project/:id_project/section/:id_section/task/:id', {
                templateUrl: '/com_zeapps_project/task/form',
                controller: 'ComZeappsProjectTaskFormCtrl'
            })
            .when('/ng/com_zeapps_project/my_tasks', {
                templateUrl: '/com_zeapps_project/task/mytask',
                controller: 'ComZeappsProjectMyTaskCtrl'
            })
        ;
    }]);


app.controller('ComZeappsTimesheetContractFormCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', 'zeapps_modal', '$uibModal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, zeapps_modal, $uibModal) {


        $scope.$parent.loadMenu("com_ze_apps_timesheet", "com_zeapps_timesheets_timesheet");

        $scope.form = {
            time: 0,
            alert: 0
        };


        $scope.loadCompany = function () {
            zeapps_modal.loadModule("com_zeapps_contact", "search_company", {}, function(objReturn) {
                //console.log(objReturn);
                if (objReturn) {
                    $scope.form.id_company = objReturn.id;
                    $scope.form.company_name = objReturn.company_name;
                } else {
                    $scope.form.id_company = 0;
                    $scope.form.company_name = '';
                }
            });
        };

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        $scope.removeCompany = function() {
            $scope.form.id_company = 0;
            $scope.form.company_name = '';
        };

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        $scope.save = function () {
            var $data = {};

            if ($routeParams.id != 0) {
                $data.id = $routeParams.id;
            }

            $data.company_id = $scope.form.id_company;
            $data.company_name = $scope.form.company_name;
            $data.contract_name = $scope.form.contract_name;
            $data.time = $scope.form.time;
            $data.alert = $scope.form.alert;
            if($scope.form.opened_at) {
                var y = $scope.form.opened_at.getFullYear();
                var M = $scope.form.opened_at.getMonth();
                var d = $scope.form.opened_at.getDate();

                var date = new Date(Date.UTC(y, M, d));

                $data.opened_at = date;
            }

            if($scope.form.end_at) {
                var y2 = $scope.form.end_at.getFullYear();
                var M2 = $scope.form.end_at.getMonth();
                var d2 = $scope.form.end_at.getDate();

                var date2 = new Date(Date.UTC(y2, M2, d2));

                $data.end_at = date2;
            }


            $http.post('/com_zeapps_timesheet/contract/save', $data).then(function (obj) {
                // pour que la page puisse être redirigé
                $location.path("/ng/com_zeapps_timesheet/contract/search");
            });
        }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        $scope.cancel = function () {
            $location.path("/ng/com_zeapps_timesheet/contract/search");
        }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        // load the list and transform strings to number or date

        if ($routeParams.id && $routeParams.id != 0) {
            $http.get('/com_zeapps_timesheet/contract/get/' + $routeParams.id).then(function (response) {
                if (response.status == 200) {
                    $scope.form = response.data;
                    $scope.form.time = parseInt($scope.form.time);
                    $scope.form.alert = parseInt($scope.form.alert);

                    $scope.form.opened_at = new Date($scope.form.opened_at);
                    $scope.form.end_at = new Date($scope.form.end_at);

                }
            });
        }


    }]);

app.config(['$routeProvider',
    function ($routeProvider) {
        $routeProvider
            .when('/ng/com_zeapps_timesheet/contract/search', {
                templateUrl: '/com_zeapps_timesheet/contract/search',
                controller: 'ComZeappsTimesheetContractSearchCtrl'
            })

            .when('/ng/com_zeapps_timesheet/contract/new', {
                templateUrl: '/com_zeapps_timesheet/contract/form',
                controller: 'ComZeappsTimesheetContractFormCtrl'
            })

            .when('/ng/com_zeapps_timesheet/contract/:id', {
                templateUrl: '/com_zeapps_timesheet/contract/form',
                controller: 'ComZeappsTimesheetContractFormCtrl'
            })


        ;
    }]);


app.controller('ComZeappsTimesheetContractSearchCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', 'zeapps_modal', '$uibModal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, zeapps_modal, $uibModal) {

        $scope.$parent.loadMenu("com_ze_apps_timesheet", "com_zeapps_timesheets_timesheet");


        var loadList = function () {
            var options = {};

            $http.post('/com_zeapps_timesheet/contract/getAll', options).then(function (response) {
                if (response.status == 200) {

                    console.log(response.data);

                    $scope.contracts = response.data ;
                }
            });
        };
        loadList() ;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        $scope.delete_contract = function (id) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous supprimer définitivement ce contact ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la suppression';
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {
                    $http.get('/com_zeapps_timesheet/contract/delete/' + id).then(function (response) {
                        if (response.status == 200) {
                            loadList() ;
                        }
                    });
                }

            }, function () {
                //console.log("rien");
            });

        };


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





        $scope.edit_contract = function(timesheet_id){
            $location.path("/ng/com_zeapps_timesheet/contract/" + timesheet_id);
        };


    }]);
app.controller('ComZeappsTimesheetTimesheetFormCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', 'zeapps_modal', '$uibModal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, zeapps_modal, $uibModal) {

        if($routeParams.id && $routeParams.id != 0){
            $http.get('/com_zeapps_timesheet/timesheet/get/'+ $routeParams.id).then(
                function(response){
                    if(response.data && response.data != "false"){
                        $scope.form = response.data;
                        $scope.form.time_spent = parseInt($scope.form.time_spent);
                        $scope.form.date_work = new Date($scope.form.date_work);

                    }

                }
            );
        }

        $scope.save = function () {
            var $data = {};

            if ($routeParams.id_contract != 0) {
                $data.contract_id = $routeParams.id_contract;
            }
            if($routeParams.id && $routeParams.id != 0){
                $data.id = $routeParams.id;
            }

            $data.time_spent = $scope.form.time_spent;

            if($scope.form.date_work) {
                var y = $scope.form.date_work.getFullYear();
                var M = $scope.form.date_work.getMonth();
                var d = $scope.form.date_work.getDate();

                var date = new Date(Date.UTC(y, M, d));

                $data.date_work = date;

            }

            $data.reason = $scope.form.reason;


            $http.post('/com_zeapps_timesheet/timesheet/save', $data).then(function (obj) {

                // pour que la page puisse être redirigé
                $location.path("/ng/com_zeapps_timesheet/timesheet/"+$routeParams.id_contract+"/search");
            });
        }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        $scope.cancel = function () {
            $location.path("/ng/com_zeapps_timesheet/contract/search");
        }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    }]);

app.config(['$routeProvider',
    function ($routeProvider) {
        $routeProvider
            .when('/ng/com_zeapps_timesheet/timesheet/:id/search', {
                templateUrl: '/com_zeapps_timesheet/timesheet/search',
                controller: 'ComZeappsTimesheetTimesheetSearchCtrl'
            })

            .when('/ng/com_zeapps_timesheet/timesheet/:id_contract/new', {
                templateUrl: '/com_zeapps_timesheet/timesheet/form',
                controller: 'ComZeappsTimesheetTimesheetFormCtrl'
            })

            .when('/ng/com_zeapps_timesheet/timesheet/:id_contract/:id', {
                templateUrl: '/com_zeapps_timesheet/timesheet/form',
                controller: 'ComZeappsTimesheetTimesheetFormCtrl'
            })


        ;
    }]);


app.controller('ComZeappsTimesheetTimesheetSearchCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', 'zeapps_modal', '$uibModal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, zeapps_modal, $uibModal) {

        $scope.contract_id = $routeParams.id;

        //Select only timesheet created by the current user
        var loadTimesheetByUser = function()
        {
            $http.get('/com_zeapps_timesheet/timesheet/getTimesheetByUser/'+ $scope.contract_id).then(function (response) {
                if (response.data && response.data != "false") {

                    $scope.timesheets = response.data;

                }
                else{
                    delete $scope.timesheets;
                }
            });
        };
        loadTimesheetByUser() ;


        // search the current user as an object
        var getContractId = function()
        {
            $http.get('/com_zeapps_timesheet/contract/get/'+ $scope.contract_id).then(function (response) {
                if (response.data && response.data != "false") {
                        console.log(response.data);
                    $scope.contract = response.data;

                }

            });
        };
        getContractId();





        $scope.edit_timesheet = function(timesheet_id){
            $location.path("/ng/com_zeapps_timesheet/timesheet/"+ $scope.contract_id +'/'+ timesheet_id);
        };






        $scope.delete_timesheet = function (id) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous supprimer définitivement ce contact ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la suppression';
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {
                    $http.get('/com_zeapps_timesheet/timesheet/delete/' + id).then(function (response) {
                        if (response.status == 200) {
                            loadTimesheetByUser() ;
                        }
                    });
                }

            }, function () {
                //console.log("rien");
            });

        };





    }]);
/**
 * Controller of the workload form view
 */
app.controller('ComZeappsWorkloadWorkloadsFormCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', 'zeapps_modal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, zeapps_modal) {

        $scope.$parent.loadMenu("com_ze_apps_workload", "com_zeapps_workloads_workload");

        $scope.form = [];


        $http.get('/com_zeapps_workload/status/getall/').then(function (response) {
            if(response.data){
                $scope.statuses = response.data;
                $scope.form.status = response.data[0].id;
            }
        });


        /**
         * Persist in database
         */
        $scope.save = function () {
            var $data = {};

            if ($scope.form.company != undefined && $scope.form.folder != undefined) {
                if ($routeParams.id != 0) {
                    $data.id = $routeParams.id;
                }

                $data.company = $scope.form.company;
                $data.folder = $scope.form.folder;
                $data.amount = $scope.form.amount;
                $data.commission = $scope.form.commission;
                //$data.margin = $scope.form.margin;
                $data.invoiced = $scope.form.invoiced;
                //$data.still_payable = $scope.form.still_payable;
                if($scope.form.opened_at) {
                    var y = $scope.form.opened_at.getFullYear();
                    var M = $scope.form.opened_at.getMonth();
                    var d = $scope.form.opened_at.getDate();

                    var date = new Date(Date.UTC(y, M, d));

                    $data.opened_at = date;
                }

                if($scope.form.delivered_at) {
                    var y2 = $scope.form.delivered_at.getFullYear();
                    var M2 = $scope.form.delivered_at.getMonth();
                    var d2 = $scope.form.delivered_at.getDate();

                    var date2 = new Date(Date.UTC(y2, M2, d2));

                    $data.delivered_at = date2;
                }

                $data.status = $scope.form.status;

                $http.post('/com_zeapps_workload/workload/save', $data).then(function (obj) {
                    // pour que la page puisse être redirigé
                    console.log(obj.data);
                    $location.path("/ng/com_zeapps_workload/workload/plan");
                });
            }
        };

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        // charge la fiche
        if ($routeParams.id && $routeParams.id != 0) {
            $http.get('/com_zeapps_workload/workload/get/' + $routeParams.id).then(function (response) {
                if (response.status == 200) {
                    $scope.form = response.data;
                    $scope.form.amount = parseFloat($scope.form.amount);
                    $scope.form.commission = parseFloat($scope.form.commission);
                    $scope.form.invoiced = parseFloat($scope.form.invoiced);

                    $scope.form.opened_at = new Date($scope.form.opened_at);
                    $scope.form.delivered_at = new Date($scope.form.delivered_at);
                }
            });
        }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        $scope.cancel = function () {
            $location.path("/ng/com_zeapps_workload/workload/plan");
        }
    }]);


/**
 * Created by nous on 27/09/2016.
 */
app.controller('ComZeappsWorkloadPlanCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', 'zeapps_modal', '$uibModal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, zeapps_modal, $uibModal) {



        $scope.$parent.loadMenu("com_ze_apps_workload", "com_zeapps_workloads_workload");




        // charge la fiche
        var loadList = function () {

            $scope.workloadsArray = {};

            $http.get('/com_zeapps_workload/status/getall/').then(function (response) {
                if(response.data){
                    angular.forEach(response.data, function(workloadTable){
                        $scope.workloadsArray[workloadTable.id] = workloadTable;
                        $scope.workloadsArray[workloadTable.id].workloads = [];
                    });
                    $http.get('/com_zeapps_workload/workload/getall/').then(function (response) {
                        if (response.status == 200) {

                            if (response.data) {
                                angular.forEach(response.data, function(workload){
                                    $scope.workloadsArray[parseInt(workload.status)].workloads.push(workload);
                                });

                            }

                        }
                    });
                }
            });

        };
        loadList() ;


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        //Preparation à la suppression d'un plan de charge

        $scope.delete_workload = function (workload_id) {
            //console.log($scope.delete);
            var modalInstance = $uibModal.open({

                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous supprimer définitivement ce plan ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la suppression';
                    }

                }

            });

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {
                    // console.log(workload_id);
                    $http.get('/com_zeapps_workload/workload/delete/' + workload_id).then(function (response) {
                        if (response.status == 200) {
                            loadList() ;
                        }
                    });
                }

            }, function () {
                //console.log("rien");
            });

        };

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        // Edition d'un plan de charge

        $scope.edit_workload = function (workload_id) {
            $location.path("/ng/com_zeapps_workload/workload/" + workload_id);
        };

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        // Drag and Drop d'un tableau à l'autre

        $scope.sortable = {
            connectWith: ".sortableContainer",
            placeholder: "app",
            stop: function( event, ui ) {

                var idObj = $(ui.item[0]).attr("data-id") ;
                var ligneSelectionnee = $(".ligne_tableau_" + idObj) ;
                var typeTableauDestination = ligneSelectionnee.parent().attr("data-type") ;

                var position = -1 ;
                var positionDefinitive = 0 ;
                $("tr", ligneSelectionnee.parent()).each(function () {
                    position++ ;
                    if (idObj == $(this).attr("data-id")) {
                        positionDefinitive = position++ ;
                        console.log(positionDefinitive)
                    }
                }) ;

                var data = {} ;
                data.idObj = idObj ;
                data.typeTableauDestination = typeTableauDestination ;
                data.position = positionDefinitive ;
                //console.log(data);

                $http.post('/com_zeapps_workload/workload/save_position', data);
            }
        };







        $scope.getTotal = function(array, attr){
            var total = 0;

            for(var i = 0; i < array.length; i++){

                total += parseFloat(array[i][attr]) ;
            }

            return total;
        };


    }]);


app.config(['$routeProvider',
    function ($routeProvider) {
        $routeProvider
            .when('/ng/com_zeapps_workload/workload/plan', {
                templateUrl: '/com_zeapps_workload/workload/plan',
                controller: 'ComZeappsWorkloadPlanCtrl'
            })


            .when('/ng/com_zeapps_workload/workload/new', {
                templateUrl: '/com_zeapps_workload/workload/form',
                controller: 'ComZeappsWorkloadWorkloadsFormCtrl'
            })

            .when('/ng/com_zeapps_workload/workload/:id', {
                templateUrl: '/com_zeapps_workload/workload/form',
                controller: 'ComZeappsWorkloadWorkloadsFormCtrl'
            })
        ;
    }]);


app.controller('FrAbekoArticleListCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', '$uibModal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, $uibModal) {

        $scope.$parent.loadMenu("fr_abeko", "fr_abeko_article");


        $scope.articles = [] ;


        var loadList = function () {
            var options = {};
            $http.post('/fr_abeko/article/getAll', options).then(function (response) {
                if (response.status == 200) {
                    $scope.articles = response.data ;
                }
            });
        };
        loadList() ;



        $scope.duplicate = function(id){
            $http.post('/fr_abeko/article/duplicate/' + id).then(function (response) {
                if (response.data) {
                    $scope.articles.push(response.data);
                }
            });
        };

        $scope.delete = function (argIdUser) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous supprimer définitivement cet article ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la suppression';
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {
                    $http.get('/fr_abeko/article/delete/' + argIdUser).then(function (response) {
                        if (response.status == 200) {
                            loadList() ;
                        }
                    });
                }

            }, function () {
                //console.log("rien");
            });

        };

    }]);
// declare the modal to the app service
listModuleModalFunction.push({
    module_name:'fr_abeko',
    function_name:'search_article',
    templateUrl:'/fr_abeko/article/modal_search_article',
    controller:'FrAbekoModalSearchArticleCtrl',
    size:'lg',
    resolve:{
        titre: function () {
            return 'Recherche d\'un article de base';
        }
    }
});


app.controller('FrAbekoModalSearchArticleCtrl', function($scope, $uibModalInstance, $http, titre, option) {
    $scope.titre = titre ;

    $scope.produits_loaded = [];
    $scope.produits = [];



    $scope.updateList = function () {
        var tabCodeProduit = [];
        var tabLibelleProduit = [];


        if ($scope.filtre_code_produit && $scope.filtre_code_produit != "") {
            var filtre_code_produit = $scope.filtre_code_produit + "";
            tabCodeProduit = filtre_code_produit.toLowerCase().split(" ") ;
        }


        if ($scope.filtre_libelle && $scope.filtre_libelle != '') {
            var filtre_libelle = $scope.filtre_libelle + "" ;
            tabLibelleProduit = filtre_libelle.toLowerCase().split(" ");
        }


        $scope.produits = [];
        for (var i = 0 ; i < $scope.produits_loaded.length ; i++) {
            var produit_correspond = true ;

            if (tabCodeProduit.length > 0) {
                for (var j = 0 ; j < tabCodeProduit.length ; j++) {
                    if ($scope.produits_loaded[i].reference.toLowerCase().indexOf(tabCodeProduit[j]) < 0) {
                        produit_correspond = false ;
                    }
                }
            }

            if (tabLibelleProduit.length > 0) {
                for (var j = 0 ; j < tabLibelleProduit.length ; j++) {
                    if ($scope.produits_loaded[i].libelle.toLowerCase().indexOf(tabLibelleProduit[j]) < 0) {
                        produit_correspond = false ;
                    }
                }
            }

            if (produit_correspond) {
                $scope.produits.push($scope.produits_loaded[i]) ;
            }
        }
    };



    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };



    var loadList = function () {
        var options = {};
        $http.post('/fr_abeko/article/getAll', options).then(function (response) {
            if (response.status == 200) {
                $scope.produits = response.data ;
                $scope.produits_loaded = response.data ;
            }
        });
    };
    loadList() ;


    $scope.returnProduct = function (id_produit) {
        var produit = false ;
        for (var i = 0 ; i < $scope.produits.length ; i++) {
            if ($scope.produits[i].id == id_produit) {
                produit = $scope.produits[i] ;
                break;
            }
        }

        $uibModalInstance.close(produit);
    }

}) ;
app.config(['$routeProvider',
    function ($routeProvider) {
        $routeProvider
            .when('/ng/fr_abeko/article', {
                templateUrl: '/fr_abeko/article/search',
                controller: 'FrAbekoArticleListCtrl'
            })
            .when('/ng/fr_abeko/article/new', {
                templateUrl: '/fr_abeko/article/view',
                controller: 'FrAbekoArticleViewCtrl'
            })
            .when('/ng/fr_abeko/article/:id', {
                templateUrl: '/fr_abeko/article/view',
                controller: 'FrAbekoArticleViewCtrl'
            })

        ;
    }]);


app.controller('FrAbekoArticleViewCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', '$uibModal', 'zeapps_modal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, $uibModal, zeapps_modal) {

        $scope.$parent.loadMenu("fr_abeko", "fr_abeko_article");

        $scope.form = [];





        // charge la fiche
        if ($routeParams.id && $routeParams.id != 0) {
            $http.get('/fr_abeko/article/get/' + $routeParams.id).then(function (response) {
                if (response.status == 200) {
                    $scope.form = response.data;
                }
            });
        }


        $scope.save = function () {
            var $data = {} ;

            if ($routeParams.id != 0) {
                $data.id = $routeParams.id;
            }

            $data.reference = $scope.form.reference ;
            $data.reference_fournisseur = $scope.form.reference_fournisseur ;
            $data.libelle = $scope.form.libelle ;
            $data.descriptif = $scope.form.descriptif ;
            $data.id_fournisseur = $scope.form.id_fournisseur ;
            $data.nom_fournisseur = $scope.form.nom_fournisseur ;
            $data.prix_achat_ht = getNumberTxt($scope.form.prix_achat_ht) ;

            $data.produits = $scope.produits ;


            $http.post('/fr_abeko/article/save', $data).then(function (obj) {
                // pour que la page puisse être redirigé
                $location.path("/ng/fr_abeko/article");
            });
        }

        $scope.cancel = function () {
            $location.path("/ng/fr_abeko/article");
        }




        var getNumberTxt = function (value) {
            if (isNaN(value) && value && value != null) {
                value = value.replace(",", ".");
            }
            return value ;
        }

    }]);
app.controller('FrAbekoArticleComposeListCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', '$uibModal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, $uibModal) {

        $scope.$parent.loadMenu("fr_abeko", "fr_abeko_article_compose");


        $scope.articles = [] ;


        var loadList = function () {
            var options = {};
            $http.post('/fr_abeko/articlecompose/getAll', options).then(function (response) {
                if (response.status == 200) {
                    $scope.articles = response.data ;
                }
            });
        };
        loadList() ;



        $scope.duplicate = function(id){
            $http.post('/fr_abeko/articlecompose/duplicate/' + id).then(function (response) {
                if (response.data) {
                    $scope.articles.push(response.data);
                }
            });
        };

        $scope.delete = function (argIdUser) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous supprimer définitivement cet article ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la suppression';
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {
                    $http.get('/fr_abeko/articlecompose/delete/' + argIdUser).then(function (response) {
                        if (response.status == 200) {
                            loadList() ;
                        }
                    });
                }

            }, function () {
                //console.log("rien");
            });

        };

    }]);
// declare the modal to the app service
listModuleModalFunction.push({
    module_name:'fr_abeko',
    function_name:'search_article_compose',
    templateUrl:'/fr_abeko/articlecompose/modal_search_article_compose',
    controller:'FrAbekoModalSearchArticleComposeCtrl',
    size:'lg',
    resolve:{
        titre: function () {
            return 'Recherche d\'un article composé';
        }
    }
});


app.controller('FrAbekoModalSearchArticleComposeCtrl', function($scope, $uibModalInstance, $http, titre, option) {
    $scope.titre = titre ;

    $scope.produits_loaded = [];
    $scope.produits = [];



    $scope.updateList = function () {
        var tabCodeProduit = [];
        var tabLibelleProduit = [];


        if ($scope.filtre_code_produit && $scope.filtre_code_produit != "") {
            var filtre_code_produit = $scope.filtre_code_produit + "";
            tabCodeProduit = filtre_code_produit.toLowerCase().split(" ") ;
        }


        if ($scope.filtre_libelle && $scope.filtre_libelle != '') {
            var filtre_libelle = $scope.filtre_libelle + "" ;
            tabLibelleProduit = filtre_libelle.toLowerCase().split(" ");
        }


        $scope.produits = [];
        for (var i = 0 ; i < $scope.produits_loaded.length ; i++) {
            var produit_correspond = true ;

            if (tabCodeProduit.length > 0) {
                for (var j = 0 ; j < tabCodeProduit.length ; j++) {
                    if ($scope.produits_loaded[i].ref.toLowerCase().indexOf(tabCodeProduit[j]) < 0) {
                        produit_correspond = false ;
                    }
                }
            }

            if (tabLibelleProduit.length > 0) {
                for (var j = 0 ; j < tabLibelleProduit.length ; j++) {
                    if ($scope.produits_loaded[i].nom.toLowerCase().indexOf(tabLibelleProduit[j]) < 0) {
                        produit_correspond = false ;
                    }
                }
            }

            if (produit_correspond) {
                $scope.produits.push($scope.produits_loaded[i]) ;
            }
        }
    };



    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };



    var loadList = function () {
        var options = {};
        $http.post('/fr_abeko/articlecompose/getAll', options).then(function (response) {
            if (response.status == 200) {
                $scope.produits = response.data ;
                $scope.produits_loaded = response.data ;
            }
        });
    };
    loadList() ;


    $scope.returnProduct = function (id_produit) {
        var produit = false ;
        for (var i = 0 ; i < $scope.produits.length ; i++) {
            if ($scope.produits[i].id == id_produit) {
                produit = $scope.produits[i] ;
                break;
            }
        }

        $uibModalInstance.close(produit);
    }

}) ;
app.config(['$routeProvider',
    function ($routeProvider) {
        $routeProvider
            .when('/ng/fr_abeko/article_compose', {
                templateUrl: '/fr_abeko/articlecompose/search',
                controller: 'FrAbekoArticleComposeListCtrl'
            })
            .when('/ng/fr_abeko/article_compose/new', {
                templateUrl: '/fr_abeko/articlecompose/view',
                controller: 'FrAbekoArticleComposeViewCtrl'
            })
            .when('/ng/fr_abeko/article_compose/:id', {
                templateUrl: '/fr_abeko/articlecompose/view',
                controller: 'FrAbekoArticleComposeViewCtrl'
            })

        ;
    }]);


app.controller('FrAbekoArticleComposeViewCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', '$uibModal', 'zeapps_modal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, $uibModal, zeapps_modal) {

        $scope.$parent.loadMenu("fr_abeko", "fr_abeko_article_compose");

        $scope.form = [];
        $scope.produits = [];
        $scope.total_brut = 0 ;
        $scope.total_avec_marge = 0 ;






        var loadListListProduit = function (argIdArticle) {
            var options = {};
            $http.post('/fr_abeko/articlecompose/getLignesAll/' + argIdArticle, options).then(function (response) {
                if (response.status == 200) {
                    $scope.produits = response.data ;


                    for(var i=0; i < $scope.produits.length ; i++) {
                        $scope.produits[i].editer = 'N' ;
                        $scope.produits[i].update = 'N' ;
                        $scope.produits[i].delete = 'N' ;
                    }

                    updateTarif() ;
                }
            });
        };


        $scope.ajouter_ligne = function() {
            // charge la modal de la liste de produit
            zeapps_modal.loadModule("fr_abeko", "search_article", {}, function(objReturn) {
                //console.log(objReturn);
                if (objReturn) {
                    objReturn.editer = 'N' ;
                    objReturn.update = 'N' ;
                    objReturn.delete = 'N' ;

                    objReturn.id_produit = objReturn.id ;
                    objReturn.id = 0 ;
                    objReturn.quantite = 1 ;

                    $scope.produits.push(objReturn) ;

                    updateTarif() ;
                }
            });
        };


        $scope.editer_ligne = function(produit) {
            produit.editer = 'Y' ;
        };

        $scope.valider_ligne = function(produit) {
            produit.editer = 'N' ;
            produit.update = 'Y' ;

            updateTarif() ;
        };

        $scope.delete_ligne = function(produit) {
            produit.delete = 'Y' ;

            updateTarif() ;
        };
        
        




        var updateTarif = function() {
            $scope.total_brut = 0 ;
            $scope.total_avec_marge = 0 ;


            var tarif = 0 ;
            for(var i=0; i < $scope.produits.length ; i++) {
                if ($scope.produits[i].delete == 'N') {
                    var tarif_achat = getNumberTxt($scope.produits[i].prix_achat_ht) * 1 ;
                    var quantite = getNumberTxt($scope.produits[i].quantite) * 1 ;
                    tarif += (tarif_achat * quantite) ;
                }
            }

            $scope.total_brut = arrondi2Chiffres(tarif) ;


            var coef = getNumberTxt($scope.form.coef_marge) ;
            if (coef != 0) {
                tarif = tarif * coef ;
            }

            tarif = arrondi2Chiffres(tarif) ;
            $scope.total_avec_marge = tarif ;




            if ($scope.form.calcul_auto_prix == 'Y') {
                $scope.form.prix_ht = tarif ;
            }
        };















        // charge la fiche
        if ($routeParams.id && $routeParams.id != 0) {
            $http.get('/fr_abeko/articlecompose/get/' + $routeParams.id).then(function (response) {
                if (response.status == 200) {
                    $scope.form = response.data;

                    loadListListProduit($routeParams.id) ;
                }
            });
        }


        $scope.save = function () {
            updateTarif() ;

            var $data = {} ;

            if ($routeParams.id != 0) {
                $data.id = $routeParams.id;
            }

            $data.ref = $scope.form.ref ;
            $data.nom = $scope.form.nom ;
            $data.descriptif = $scope.form.descriptif ;
            $data.prix_ht = getNumberTxt($scope.form.prix_ht) ;
            $data.calcul_auto_prix = $scope.form.calcul_auto_prix ;
            $data.coef_marge = getNumberTxt($scope.form.coef_marge) ;

            $data.produits = $scope.produits ;

            $http.post('/fr_abeko/articlecompose/save', $data).then(function (obj) {
                // pour que la page puisse être redirigé
                $location.path("/ng/fr_abeko/article_compose");
            });
        }

        $scope.cancel = function () {
            $location.path("/ng/fr_abeko/article_compose");
        }



        var getNumberTxt = function (value) {
            if (isNaN(value) && value && value != null) {
                value = value.replace(",", ".");
            }
            return value ;
        }

        var arrondi3Chiffres = function (value) {
            return Math.round(value*1000)/1000;
        }
        var arrondi2Chiffres = function (value) {
            return Math.round(value*100)/100;
        }

    }]);
app.controller('FrAbekoCiterneTypeListCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', '$uibModal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, $uibModal) {

        $scope.$parent.loadMenu("fr_abeko", "fr_abeko_citerne_type");


        $scope.citernes_types = [] ;


        var loadList = function () {
            var options = {};
            $http.post('/fr_abeko/citernetype/getAll', options).then(function (response) {
                if (response.status == 200) {
                    $scope.citernes_types = response.data ;
                }
            });
        };
        loadList() ;





        $scope.delete = function (argIdUser) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous supprimer définitivement cette citerne type ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la suppression';
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {
                    $http.get('/fr_abeko/citernetype/delete/' + argIdUser).then(function (response) {
                        if (response.status == 200) {
                            loadList() ;
                        }
                    });
                }

            }, function () {
                //console.log("rien");
            });

        };

    }]);
app.config(['$routeProvider',
    function ($routeProvider) {
        $routeProvider
            .when('/ng/fr_abeko/citerne_type', {
                templateUrl: '/fr_abeko/citernetype/search',
                controller: 'FrAbekoCiterneTypeListCtrl'
            })
            .when('/ng/fr_abeko/citerne_type/new', {
                templateUrl: '/fr_abeko/citernetype/view',
                controller: 'FrAbekoCiterneTypeViewCtrl'
            })
            .when('/ng/fr_abeko/citerne_type/:id', {
                templateUrl: '/fr_abeko/citernetype/view',
                controller: 'FrAbekoCiterneTypeViewCtrl'
            })

        ;
    }]);


app.controller('FrAbekoCiterneTypeViewCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', '$uibModal', 'zeapps_modal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, $uibModal, zeapps_modal) {

        $scope.$parent.loadMenu("fr_abeko", "fr_abeko_citerne_type");



        $scope.form = [];
        $scope.tarifs = [];
        $scope.produits = [];

        $scope.type_position = [] ;
        $scope.type_position.push('evacuation') ;
        $scope.type_position.push('aspiration') ;
        $scope.type_position.push('trop-plein') ;
        $scope.type_position.push('event') ;



        var loadListTarif = function () {
            var options = {};
            $http.post('/fr_abeko/tarifciterne/getAll', options).then(function (response) {
                if (response.status != 200) {
                } else {
                    $scope.tarifs = response.data;

                    if ($scope.form.tarif_applicable && $scope.form.tarif_applicable != "") {
                        var tabTarifApplicable = ($scope.form.tarif_applicable + "").split(",");

                        for (var i = 0 ; i < tabTarifApplicable.length ; i++) {
                            var value = tabTarifApplicable[i].trim() ;

                            for (var j = 0 ; j < $scope.tarifs.length ; j++) {
                                if ($scope.tarifs[j].id == value) {
                                    $scope.tarifs[j].value = 'Y' ;
                                }
                            }
                        }
                    }
                }
            });
        };



        var loadListListProduit = function (argIdCiterne) {
            var options = {};
            $http.post('/fr_abeko/citernetype/getLignesAll/' + argIdCiterne, options).then(function (response) {
                if (response.status == 200) {
                    $scope.produits = response.data ;


                    for (var i_produit = 0 ; i_produit < $scope.produits.length ; i_produit++) {
                        var tab_type_point = $scope.produits[i_produit].type_point.split(",") ;
                        $scope.produits[i_produit].type_point_form = {};

                        for (var i = 0; i < $scope.type_position.length; i++) {
                            $scope.produits[i_produit].type_point_form[$scope.type_position[i]] = false;

                            for (var i_point = 0; i_point < tab_type_point.length; i_point++) {
                                if (tab_type_point[i_point] == $scope.type_position[i]) {
                                    $scope.produits[i_produit].type_point_form[$scope.type_position[i]] = true;
                                }
                            }
                        }
                    }


                    for(var i=0; i < $scope.produits.length ; i++) {
                        $scope.produits[i].editer = 'N' ;
                        $scope.produits[i].update = 'N' ;
                        $scope.produits[i].delete = 'N' ;
                    }
                }
            });
        };

        $scope.ajouter_ligne = function() {
            // charge la modal de la liste de produit
            zeapps_modal.loadModule("fr_abeko", "search_article_compose", {}, function(objReturn) {
                if (objReturn) {
                    objReturn.editer = 'N' ;
                    objReturn.update = 'N' ;
                    objReturn.delete = 'N' ;


                    objReturn.id_article_compose = objReturn.id ;
                    objReturn.id = 0 ;


                    objReturn.type_point_form = {};
                    for (var i = 0; i < $scope.type_position.length; i++) {
                        objReturn.type_point_form[$scope.type_position[i]] = false;
                    }

                    $scope.produits.push(objReturn) ;
                }
            });
        };


        var updateListPosition = function () {
            // génère la liste des types de position
            for (var i_produit = 0 ; i_produit < $scope.produits.length ; i_produit++) {
                $scope.produits[i_produit].type_point = "" ;

                for (var i = 0; i < $scope.type_position.length; i++) {
                    if ($scope.produits[i_produit].type_point_form[$scope.type_position[i]]) {
                        if ($scope.produits[i_produit].type_point != '') {
                            $scope.produits[i_produit].type_point += "," ;
                        }
                        $scope.produits[i_produit].type_point += $scope.type_position[i] ;
                    }
                }
            }
        };

        $scope.editer_ligne = function(produit) {
            produit.editer = 'Y' ;
        };

        $scope.valider_ligne = function(produit) {
            produit.editer = 'N' ;
            produit.update = 'Y' ;
            updateListPosition() ;
        };

        $scope.delete_ligne = function(produit) {
            produit.delete = 'Y' ;
        };








        // charge la fiche
        if ($routeParams.id && $routeParams.id != 0) {
            $http.get('/fr_abeko/citernetype/get/' + $routeParams.id).then(function (response) {
                if (response.status == 200) {
                    $scope.form = response.data;

                    loadListTarif() ;

                    loadListListProduit($routeParams.id) ;
                }
            });
        } else {
            loadListTarif() ;
        }


        $scope.save = function () {
            var $data = {} ;

            if ($routeParams.id != 0) {
                $data.id = $routeParams.id;
            }

            $data.nom = $scope.form.nom ;


            $data.tarif_applicable = "" ;
            for (var j = 0 ; j < $scope.tarifs.length ; j++) {
                if ($scope.tarifs[j].value == 'Y') {
                    if ($data.tarif_applicable != '') {
                        $data.tarif_applicable += ',' ;
                    }
                    $data.tarif_applicable += $scope.tarifs[j].id ;
                }
            }

            for (var i = 0 ; i < $scope.produits.length ; i++) {
                if ($scope.produits[i].editer == 'Y') {
                    $scope.valider_ligne($scope.produits[i]);
                }
            }

            $data.liste_point_actif = "" ;


            $data.produits = $scope.produits ;


            $http.post('/fr_abeko/citernetype/save', $data).then(function (obj) {
                // pour que la page puisse être redirigé
                $location.path("/ng/fr_abeko/citerne_type");
            });
        };

        $scope.cancel = function () {
            $location.path("/ng/fr_abeko/citerne_type");
        };

    }]);

app.controller('FrAbekoLogoFormCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', 'Upload',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, Upload) {

        $scope.form = [];




        $scope.cancel = function () {
            $location.path("/ng/fr_abeko/logo/search");
        }



            $scope.upload = function () {
                var options = {
                    width: 150

                };

                Upload.resize($scope.file, options).then(function(resizedFile){
                Upload.upload({
                    url: '/fr_abeko/logo/save',
                    data: {file: resizedFile, libelle: $scope.form.libelle}
                }).then(function (resp) {

                    console.log('Success ' + resp.config.data.file.name + 'uploaded. Response: ' + resp.data);
                    Upload.imageDimensions($scope.file).then(function(dimensions){console.log(dimensions.width, dimensions.height);});
                }, function (resp) {
                    console.log('Error status: ' + resp.status);
                }, function (evt) {
                    var progressPercentage = parseInt(100.0 * evt.loaded / evt.total);
                    console.log('progress: ' + progressPercentage + '% ' + evt.config.data.file.name);
                });

                });

            };


    }]);


app.config(['$routeProvider',
    function ($routeProvider) {
        $routeProvider
            .when('/ng/fr_abeko/logo/search', {
                templateUrl: '/fr_abeko/logo/search',
                controller: 'FrAbekoLogoSearchCtrl'
            })
            .when('/ng/fr_abeko/logo/new', {
                templateUrl: '/fr_abeko/logo/form',
                controller: 'FrAbekoLogoFormCtrl'
            })

        ;
    }]);


app.controller('FrAbekoLogoSearchCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', '$uibModal', 'zeapps_modal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, $uibModal, zeapps_modal) {

        var loadList = function () {
            var options = {};
            $http.post('/fr_abeko/logo/getAll', options).then(function (response) {

                if (response.status == 200) {
                    $scope.logos = response.data ;
                }
            });
        };
        loadList() ;



        $scope.delete = function (logoId) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous supprimer définitivement ce contact ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la suppression';
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {
                    $http.get('/fr_abeko/logo/delete/' + logoId).then(function (response) {
                        if (response.status == 200) {
                            loadList() ;
                        }
                    });
                }

            }, function () {
                //console.log("rien");
            });

        };
    }]);
app.controller('FrAbekoPlanFormCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', '$uibModal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, $uibModal) {

        $scope.$parent.loadMenu("fr_abeko", "fr_abeko_plan");


        $scope.fil_arianne = '' ;
        $scope.etape = 1 ;
        $scope.msgErreur = '' ;



        $scope.citernes_types = [] ;
        $scope.tarifs = [] ;
        $scope.tarifs_lignes = [] ;
        $scope.m3 = [] ;
        $scope.dimensions = [] ;


        var listPointActifToSave = '' ;
        var idCiterneToSave = 0 ;
        var idTarifToSave = 0 ;
        var idTarifLigneToSave = 0 ;
        var idBacheToSave = 0 ;
        var nomBacheToSave = '' ;
        var m3ToSave = 0 ;
        var largeurToSave = 0 ;
        var profondeurToSave = 0 ;
        var tarif_htToSave = 0 ;




        // 1) choix du type de citerne
        var loadListCiterneType = function () {
            var options = {};
            $http.post('/fr_abeko/citernetype/getAll', options).then(function (response) {
                if (response.status == 200) {
                    $scope.citernes_types = response.data ;
                }
            });
        };
        loadListCiterneType() ;

        $scope.choix_citerne = function(idCiterne) {
            idCiterneToSave = idCiterne ;

            for(var i = 0 ; i < $scope.citernes_types.length ; i++) {
                if ($scope.citernes_types[i].id == idCiterne) {
                    $scope.fil_arianne = $scope.citernes_types[i].nom ;
                    $scope.etape = 2 ;

                    listPointActifToSave = $scope.citernes_types[i].liste_point_actif ;
                    
                    loadListTarif($scope.citernes_types[i].tarif_applicable) ;
                    break;
                }
            }
        };






        // 2) choix du tarif
        var loadListTarif = function (listIdTarif) {
            if (listIdTarif != '') {
                $http.get('/fr_abeko/tarifciterne/get_by_id_tarif/' + listIdTarif).then(function (response) {
                    if (response.status == 200) {
                         console.log(response.data);
                        $scope.tarifs = response.data;
                    }
                });
            } else {
                $scope.etape = 99 ;
                $scope.msgErreur = 'Aucun tarif pour ce type de citerne' ;
            }
        };

        $scope.choix_tarif = function(idTarif) {
            idTarifToSave = idTarif ;

            for(var i = 0 ; i < $scope.tarifs.length ; i++) {
                if ($scope.tarifs[i].id == idTarif) {
                    $scope.fil_arianne += " > " + $scope.tarifs[i].nom ;
                    $scope.etape = 3 ;

                    idBacheToSave = $scope.tarifs[i].id_bache ;
                    nomBacheToSave = $scope.tarifs[i].nom ;

                    loadListTarifM3(idTarif) ;
                    break;
                }
            }
        };





        // 3) choix du nombre de m3
        var loadListTarifM3 = function (idTarif) {
            $http.get('/fr_abeko/tarifciterne/getLignesAll/' + idTarif).then(function (response) {
                if (response.status == 200) {
                    $scope.tarifs_lignes = response.data;
                    $scope.m3 = [] ;

                    if ($scope.tarifs_lignes.length) {
                        for (var i = 0 ; i < $scope.tarifs_lignes.length ; i++) {
                            if ($scope.m3.indexOf($scope.tarifs_lignes[i].m3) < 0) {
                                $scope.m3.push($scope.tarifs_lignes[i].m3) ;
                            }
                        }
                    } else {
                        $scope.etape = 99 ;
                        $scope.msgErreur = 'Aucun volume défini pour ce tarif' ;
                    }
                }
            });
        };

        $scope.choix_volume = function(volume) {
            $scope.fil_arianne += " > " + volume + " m3" ;
            $scope.etape = 4 ;

            $scope.dimensions = [] ;

            m3ToSave = volume ;

            for (var i = 0 ; i < $scope.tarifs_lignes.length ; i++) {
                if ($scope.tarifs_lignes[i].m3 == volume) {
                    $scope.dimensions.push($scope.tarifs_lignes[i]) ;
                }
            }
        };



        $scope.choix_dimension = function (idTarifLigne) {
            idTarifLigneToSave = idTarifLigne ;
            for (var i = 0 ; i < $scope.tarifs_lignes.length ; i++) {
                if ($scope.tarifs_lignes[i].id == idTarifLigne) {
                    $scope.etape = 5 ;
                    $scope.fil_arianne += " > " + $scope.tarifs_lignes[i].largeur + " x " + $scope.tarifs_lignes[i].profondeur ;

                    largeurToSave = $scope.tarifs_lignes[i].largeur ;
                    profondeurToSave = $scope.tarifs_lignes[i].profondeur ;
                }
            }
        };



        $scope.enregistrer = function () {
            var $data = {} ;

            $data.nom = $scope.form.nom ;
            $data.id_citerne_type = idCiterneToSave ;
            $data.id_tarif_applicable = idTarifToSave ;
            $data.id_tarif_applicable_ligne = idTarifLigneToSave ;
            $data.liste_point_actif = listPointActifToSave ;
            $data.m3 = m3ToSave ;
            $data.largeur = largeurToSave ;
            $data.profondeur = profondeurToSave ;
            $data.tarif_ht = tarif_htToSave ;
            $data.id_bache = idBacheToSave ;
            $data.nom_bache = nomBacheToSave ;

            $http.post('/fr_abeko/plan/save', $data).then(function (obj) {
                // pour que la page puisse être redirigé
                $location.path("/ng/fr_abeko/plan/view/" + obj.data);
            });
        };



    }]);
app.controller('FrAbekoPlanListCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', '$uibModal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, $uibModal) {

        $scope.$parent.loadMenu("fr_abeko", "fr_abeko_plan");


        $scope.plans = [] ;


        var loadList = function () {
            var options = {};
            $http.post('/fr_abeko/plan/getAll', options).then(function (response) {
                if (response.status == 200) {
                    $scope.plans = response.data ;
                }
            });
        };
        loadList() ;





        $scope.delete = function (argId) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous supprimer définitivement ce plan ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la suppression';
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {
                    $http.get('/fr_abeko/plan/delete/' + argId).then(function (response) {
                        if (response.status == 200) {
                            loadList() ;
                        }
                    });
                }

            }, function () {
                //console.log("rien");
            });

        };

    }]);
// declare the modal to the app service
listModuleModalFunction.push({
    module_name:'fr_abeko',
    function_name:'search_article_plan',
    templateUrl:'/fr_abeko/articlecompose/modal_search_article_compose',
    controller:'FrAbekoModalSearchArticleComposePlanCtrl',
    size:'lg',
    resolve:{
        titre: function () {
            return 'Recherche d\'un article composé';
        }
    }
});


app.controller('FrAbekoModalSearchArticleComposePlanCtrl', function($scope, $uibModalInstance, $http, titre, option) {
    $scope.titre = titre ;

    $scope.produits_loaded = [];
    $scope.produits = [];


    var optionModal = option ;



    $scope.updateList = function () {
        var tabCodeProduit = [];
        var tabLibelleProduit = [];


        if ($scope.filtre_code_produit && $scope.filtre_code_produit != "") {
            var filtre_code_produit = $scope.filtre_code_produit + "";
            tabCodeProduit = filtre_code_produit.toLowerCase().split(" ") ;
        }


        if ($scope.filtre_libelle && $scope.filtre_libelle != '') {
            var filtre_libelle = $scope.filtre_libelle + "" ;
            tabLibelleProduit = filtre_libelle.toLowerCase().split(" ");
        }


        $scope.produits = [];
        for (var i = 0 ; i < $scope.produits_loaded.length ; i++) {
            var produit_correspond = true ;

            if (tabCodeProduit.length > 0) {
                for (var j = 0 ; j < tabCodeProduit.length ; j++) {
                    if ($scope.produits_loaded[i].ref.toLowerCase().indexOf(tabCodeProduit[j]) < 0) {
                        produit_correspond = false ;
                    }
                }
            }

            if (tabLibelleProduit.length > 0) {
                for (var j = 0 ; j < tabLibelleProduit.length ; j++) {
                    if ($scope.produits_loaded[i].nom.toLowerCase().indexOf(tabLibelleProduit[j]) < 0) {
                        produit_correspond = false ;
                    }
                }
            }

            if (produit_correspond) {
                $scope.produits.push($scope.produits_loaded[i]) ;
            }
        }
    };



    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };



    var loadList = function () {
            $http.get('/fr_abeko/citernetype/getLignesAll/' + optionModal.idCiterneType + '/Y').then(function (response) {
            if (response.status == 200) {
                var dataReturn = response.data ;

                $scope.produits = [] ;
                $scope.produits_loaded = [] ;

                for (var i = 0 ; i < dataReturn.length ; i++) {
                    var tabPoint = dataReturn[i].type_point.split(",") ;
                    if (tabPoint.indexOf(optionModal.type_point) >= 0) {
                        $scope.produits.push(dataReturn[i]) ;
                        $scope.produits_loaded.push(dataReturn[i]) ;
                    }
                }
            }
        });
    };
    loadList() ;


    $scope.returnProduct = function (id_produit) {
        var produit = false ;
        for (var i = 0 ; i < $scope.produits.length ; i++) {
            if ($scope.produits[i].id == id_produit) {
                produit = $scope.produits[i] ;
                break;
            }
        }

        $uibModalInstance.close(produit);
    }

}) ;
app.directive('planCitern',
    function($rootScope, $timeout){
        return{
            restrict: 'E',
            replace: true,
            scope: {
                positions: '=',
                produits: '=',
                options: '=',
                ajoutProduit: '&',
                del: '&',
                updatePositions: '&'
            },
            template:   "<div>" +
                            "<canvas id='plan' width='640' height='500' style='background-color: #ffffff;width: 100%'></canvas>" +
                            "<div class='form-group' ng-show='selectedDimension && options.dimensions'>" +
                                "<label for='dimensionValue'>Position pour {{ selectedDimension.name }} sur la {{ (selectedDimension.axis == 'x') ? 'profondeur' : 'largeur' }} </label>" +
                                "<span class='input-group'>" +
                                    "<div class='input-group-addon'>mm</div>" +
                                    "<input type='number' min='0' id='dimensionValue' class='form-control' ng-model='selectedDimension.value'>" +
                                    "<span class='input-group-btn'>" +
                                        "<button class='btn btn-success' ng-click='updateSize()'>Valider</button>" +
                                    "</span>" +
                                "</span>" +
                            "</div>" +
                            "<div ng-show='clickedPosition'>" +
                                "<button class='btn btn-sm btn-success' ng-click='ajoutProduit()(clickedPosition.id, clickedPosition.type_position)' ng-show='clickedPosition && !hasProduct(clickedPosition)'>Placer un produit sur la position</button>" +
                                "<button class='btn btn-sm btn-danger' ng-click='delPosition()'>Supprimer la position</button>" +
                            "</div>" +
                        "</div>",
            link: function(scope){

                scope.$watch('positions', function(value, oldValue){
                    if(value != undefined && value != oldValue){
                        getMeasurementsCoordinates();
                        drawMap();
                        scope.updatePositions()();
                    }
                }, true);

                scope.$watch('options', function(value, oldValue){
                    if(value != undefined && value != oldValue){
                        longueur_mm = parseFloat(scope.options.profondeur).toFixed(3)*1000;
                        largeur_mm = parseFloat(scope.options.largeur).toFixed(3)*1000;
                        getMeasurementsCoordinates();
                        drawMap();
                    }
                }, true);

                scope.$watch('produits', function(value, oldValue){
                    if(value != undefined && value != oldValue){
                        getMeasurementsCoordinates();
                        drawMap();
                    }
                }, true);

                scope.$on("$destroy", function() {
                    $(window).off("resize");
                });

                $(window).resize(function () {
                    drawMap() ;
                });

                scope.updateSize = function(){
                    var oldValue = Math.round(scope.selectedDimension.position.coordinates['axis' + scope.selectedDimension.axis.toUpperCase()].size / coef);
                    var variation = oldValue - scope.selectedDimension.value;
                    var positionFinal = scope.selectedDimension.position[scope.selectedDimension.axis] - variation;
                    if(positionFinal > 0 &&
                        ( (scope.selectedDimension.axis == 'x' && positionFinal < longueur_mm) ||
                        (scope.selectedDimension.axis == 'y' && positionFinal < largeur_mm) )) {
                        scope.selectedDimension.position[scope.selectedDimension.axis] = positionFinal;
                        scope.updatePositions()();
                    }
                };

                scope.delPosition = function(){
                    scope.del()(scope.clickedPosition).then(function(){
                        if ($rootScope.$$phase) {
                            scope.$evalAsync(function(){
                                scope.clickedPosition = false;
                            });
                        } else {
                            scope.$apply(function(){
                                scope.clickedPosition = false;
                            });
                        }
                        drawMap();
                    });
                };


                /************* paramètre *************/
                // FUCK THOSE SHITS
                var marge_gauche = 60 ;
                var marge_droite = 60 ;
                var marge_haut = 60 ;
                var marge_bas = 60 ;
                /************* END : paramètre *************/




                /************* initialisation de variable *************/
                var coef = 1;
                var grabbedPosition = false;
                var dragging;
                var longueur_mm = 5000;
                var largeur_mm = 2500;
                var canvasSize_x = longueur_mm * coef;
                var canvasSize_y = largeur_mm * coef;
                /************* END : initialisation de variable *************/

                function sqr(a) {
                    return a*a;
                }

                scope.hasProduct = function(position){
                    for (var j = 0 ; j < scope.produits.length ; j++) {
                        if (position.id == scope.produits[j].id_position) {
                            return true;
                        }
                    }
                    return false;
                };

                scope.getMeasurementCoordinates = function(x,y,x2,y2){

                    var coordinates = {
                        axisX : {
                            x: 0,
                            y: 0,
                            size: 0
                        },
                        axisY : {
                            x: 0,
                            y: 0,
                            size: 0
                        }
                    };

                    coordinates.axisX.size = Math.abs(x2 - x);
                    coordinates.axisY.size = Math.abs(y2 - y);

                    coordinates.axisX.x = (x2 - x) / 2 + x;
                    coordinates.axisX.y = y2;

                    coordinates.axisY.x = x2;
                    coordinates.axisY.y = (y2 - y) / 2 + y;

                    return coordinates;
                };

                var getMeasurementsCoordinates = function(){

                    var coordinate;
                    var x; var x_previous;
                    var y; var y_previous;
                    var i;

                    // event
                    for(i=0;i<scope.positions.event.length;i++){
                        if( ( scope.options.only_active && scope.hasProduct(scope.positions.event[i]) ) || !scope.options.only_active) {
                            x = scope.positions.event[i].x * coef;
                            y = scope.positions.event[i].y * coef;
                            coordinate = scope.getMeasurementCoordinates(0, 0, x, y);
                            scope.positions.event[i].coordinates = coordinate;
                        }
                        else{
                            delete scope.positions.event[i].coordinates;
                        }
                    }

                    // tropPlein
                    for(i=0;i<scope.positions.tropPlein.length;i++){
                        if( ( scope.options.only_active && scope.hasProduct(scope.positions.tropPlein[i]) ) || !scope.options.only_active) {
                            x = scope.positions.tropPlein[i].x * coef;
                            y = scope.positions.tropPlein[i].y * coef;
                            if( x > canvasSize_x / 2 ){
                                coordinate = scope.getMeasurementCoordinates(canvasSize_x, 0, x, y);
                            }
                            else{
                                coordinate = scope.getMeasurementCoordinates(0, 0, x, y);
                            }
                            scope.positions.tropPlein[i].coordinates = coordinate;
                        }
                        else{
                            delete scope.positions.tropPlein[i].coordinates;
                        }
                    }

                    // fond
                    for(i=0;i<scope.positions.fond.length;i++){
                        if( ( scope.options.only_active && scope.hasProduct(scope.positions.fond[i]) ) || !scope.options.only_active) {
                            x = scope.positions.fond[i].x * coef;
                            y = scope.positions.fond[i].y * coef;
                            coordinate = scope.getMeasurementCoordinates(0, 0, x, y);
                            scope.positions.fond[i].coordinates = coordinate;
                        }
                        else{
                            delete scope.positions.fond[i].coordinates;
                        }
                    }

                    // flanc
                    var haut = [];var bas = [];var gauche = [];var droite = [];
                    // sort them by side
                    for(i=0;i<scope.positions.flanc.length;i++){
                        if( ( scope.options.only_active && scope.hasProduct(scope.positions.flanc[i]) ) || !scope.options.only_active) {
                            if (scope.positions.flanc[i].x == 0) {
                                gauche.push(scope.positions.flanc[i]);
                            }
                            else if (scope.positions.flanc[i].x == longueur_mm) {
                                droite.push(scope.positions.flanc[i]);
                            }
                            else if (scope.positions.flanc[i].y == 0) {
                                haut.push(scope.positions.flanc[i]);
                            }
                            else if (scope.positions.flanc[i].y == largeur_mm) {
                                bas.push(scope.positions.flanc[i]);
                            }
                        }
                        else{
                            delete scope.positions.flanc[i].coordinates;
                        }
                    }
                    // then sort them by distance from the origin and get measurement from one point to the next
                    gauche.sort(function(a,b){ return a.y - b.y;});
                    droite.sort(function(a,b){ return a.y - b.y;});
                    haut.sort(function(a,b){ return a.x - b.x;});
                    bas.sort(function(a,b){ return a.x - b.x;});
                    for(i=0; i<gauche.length;i++){
                        x = gauche[i].x * coef;
                        y = gauche[i].y * coef;
                        if(i == 0){
                            coordinate = scope.getMeasurementCoordinates(0, 0, x, y);
                            gauche[i].coordinates = coordinate;
                        }
                        else{
                            x_previous = gauche[i-1].x * coef;
                            y_previous = gauche[i-1].y * coef;
                            coordinate = scope.getMeasurementCoordinates(x_previous, y_previous, x, y);
                            gauche[i].coordinates = coordinate;
                        }
                    }
                    for(i=0; i<droite.length;i++){
                        x = droite[i].x * coef;
                        y = droite[i].y * coef;
                        if(i == 0){
                            coordinate = scope.getMeasurementCoordinates(canvasSize_x, 0, x, y);
                            droite[i].coordinates = coordinate;
                        }
                        else{
                            x_previous = droite[i-1].x * coef;
                            y_previous = droite[i-1].y * coef;
                            coordinate = scope.getMeasurementCoordinates(x_previous, y_previous, x, y);
                            droite[i].coordinates = coordinate;
                        }
                    }
                    for(i=0; i<haut.length;i++){
                        x = haut[i].x * coef ;
                        y = haut[i].y * coef ;
                        if(i == 0){
                            coordinate = scope.getMeasurementCoordinates(0, 0, x, y);
                            haut[i].coordinates = coordinate;
                        }
                        else{
                            x_previous = haut[i-1].x * coef;
                            y_previous = haut[i-1].y * coef;
                            coordinate = scope.getMeasurementCoordinates(x_previous, y_previous, x, y);
                            haut[i].coordinates = coordinate;
                        }
                    }
                    for(i=0; i<bas.length;i++){
                        x = bas[i].x * coef ;
                        y = bas[i].y * coef ;
                        if(i == 0){
                            coordinate = scope.getMeasurementCoordinates(0, canvasSize_y, x, y);
                            bas[i].coordinates = coordinate;
                        }
                        else{
                            x_previous = bas[i-1].x * coef ;
                            y_previous = bas[i-1].y * coef ;
                            coordinate = scope.getMeasurementCoordinates(x_previous, y_previous, x, y);
                            bas[i].coordinates = coordinate;
                        }
                    }
                };

                function drawPosition(ctx, x, y, rayon, info, couleurFond, couleurBordure, lineWidth) {
                    if (rayon < 10) {
                        rayon = 10 ;
                    }


                    ctx.font = "10pt verdana";
                    ctx.textAlign = 'center';
                    ctx.strokeStyle = couleurBordure;
                    ctx.fillStyle = couleurFond;

                    ctx.beginPath();
                    ctx.lineWidth = lineWidth ;
                    ctx.arc(x, y, rayon, 0, Math.PI*2, true);
                    ctx.fill();
                    ctx.stroke();

                    // ecrit le n° de la position
                    ctx.fillStyle = "#000000" ;
                    ctx.fillText(info, x, y + 5);
                }


                function drawFond(ctx, x, y, largeur, info, couleurFond, couleurBordure, lineWidth) {
                    if (largeur < 10) {
                        largeur = 10 ;
                    }


                    ctx.font = "10pt verdana";
                    ctx.textAlign = 'center';
                    ctx.strokeStyle = couleurBordure;
                    ctx.fillStyle = couleurFond;

                    ctx.beginPath();
                    ctx.lineWidth = lineWidth ;
                    ctx.fillRect(x - (largeur/2), y - (largeur/2), largeur, largeur);
                    ctx.strokeRect(x - (largeur/2), y - (largeur/2), largeur, largeur);

                    // ecrit le n° de la position
                    ctx.fillStyle = "#000000" ;
                    ctx.fillText(info, x, y + 5);
                }

                function drawMarquage(ctx, position, largeur, canvasSize_x, canvasSize_y){
                    if (largeur < 10) {
                        largeur = 10 ;
                    }
                    var x = 0; var y = 0;

                    var text = 'M';

                    if(position == 'top'){
                        x = canvasSize_x/ 2 + marge_gauche;
                        y = marge_haut - largeur / 2 - 5;
                    }
                    else if(position == 'bottom'){
                        x = canvasSize_x/ 2 + marge_gauche;
                        y = marge_haut + canvasSize_y + largeur / 2 + 5;
                    }
                    else if(position == 'left'){
                        x = marge_gauche - largeur / 2 - 5;
                        y = canvasSize_y/ 2 + marge_haut;
                    }
                    else if(position == 'right'){
                        x = marge_gauche + canvasSize_x + largeur / 2 + 5;
                        y = canvasSize_y/2 + marge_haut;
                    }

                    ctx.font = "11pt verdana";
                    ctx.textAlign = 'center';
                    ctx.strokeStyle = "#DF3A01";
                    ctx.fillStyle = "#ffffff";

                    ctx.fillRect(x - (largeur/2), y - (largeur/2), largeur, largeur);
                    ctx.strokeRect(x - (largeur/2), y - (largeur/2), largeur, largeur);


                    ctx.fillStyle = "#DF3A01" ;
                    ctx.fillText(text, x, y + 5);

                    ctx.strokeStyle = "#000000";
                }

                function drawEnroulement(ctx, sens, canvasSize_x, canvasSize_y){

                    var text = '';

                    if(sens > 0){
                        text = "Sens d'enroulement --->";
                    }
                    else{
                        text = "<-- Sens d'enroulement";
                    }
                    var x = ( canvasSize_x - ctx.measureText(text).width + marge_gauche )/ 2; var y = canvasSize_y - 5;

                    ctx.font = "9pt verdana";
                    ctx.fillStyle = "#000000" ;
                    ctx.fillText(text, x, y);

                }

                function drawCiternMeasure(ctx, canvasSize_x, canvasSize_y) { // we are drawing both X and Y measures

                    // determine le centre de la droite
                    var xCentre = {
                        x: marge_gauche + canvasSize_x/2,
                        y: marge_haut/2
                    };
                    var yCentre = {
                        x: marge_gauche/2,
                        y: marge_haut + canvasSize_y/2
                    };

                    // Start by drawing X measurement

                    ctx.strokeStyle = "#0000A8";
                    ctx.fillStyle = "#000000";
                    ctx.textAlign = 'center';

                    if(canvasSize_x > 0) {
                        // main bar
                        ctx.beginPath();
                        ctx.moveTo(xCentre.x - (canvasSize_x / 2), xCentre.y);
                        ctx.lineTo(xCentre.x + (canvasSize_x / 2), xCentre.y);
                        ctx.fill();
                        ctx.stroke();
                        ctx.closePath();

                        if(scope.options.profondeur) {
                            // Value
                            ctx.font = "9pt verdana";
                            var profondeurReelle = parseFloat(scope.options.profondeur);
                            var textX = profondeurReelle.toFixed(3)*1000 + " mm";
                            ctx.fillText(textX, xCentre.x, xCentre.y - 2);
                        }
                    }

                    // Onto Y measurement

                    if(canvasSize_y > 0) {
                        // main bar
                        ctx.beginPath();
                        ctx.moveTo(yCentre.x, yCentre.y - (canvasSize_y / 2));
                        ctx.lineTo(yCentre.x, yCentre.y + (canvasSize_y / 2));
                        ctx.fill();
                        ctx.stroke();
                        ctx.closePath();

                        if(scope.options.largeur) {

                            // We do all of that to write it vertically !
                            ctx.save();

                            ctx.translate(yCentre.x, yCentre.y);
                            ctx.rotate(-Math.PI/2);

                            // Value
                            ctx.font = "9pt verdana";
                            var largeurReelle = parseFloat(scope.options.largeur);
                            var textY = largeurReelle.toFixed(3)*1000 + " mm";
                            ctx.fillText(textY, 0, -2);

                            ctx.restore();
                        }
                    }

                    ctx.strokeStyle = "#000000";
                    ctx.fillStyle = "#000000";
                }

                function drawMeasurementLines(ctx) {

                    angular.forEach(scope.positions, function(array, type_position){
                        if(scope.options.dimensionsType[type_position]) {
                            for (var i = 0; i < array.length; i++) {

                                if(array[i].coordinates != undefined) {

                                    // Start by drawing X measurement line

                                    ctx.strokeStyle = "#0000A8";
                                    ctx.lineWidth = 1;
                                    ctx.fillStyle = "#000000";
                                    ctx.textAlign = 'center';

                                    if (array[i].coordinates.axisX.size > 0) {
                                        // main bar
                                        ctx.beginPath();
                                        ctx.moveTo(array[i].coordinates.axisX.x - (array[i].coordinates.axisX.size / 2) + marge_gauche, array[i].coordinates.axisX.y + marge_haut);
                                        ctx.lineTo(array[i].coordinates.axisX.x + (array[i].coordinates.axisX.size / 2) + marge_gauche, array[i].coordinates.axisX.y + marge_haut);
                                        ctx.fill();
                                        ctx.stroke();
                                        ctx.closePath();
                                    }

                                    // Onto Y measurement line

                                    ctx.strokeStyle = "#0000A8";
                                    ctx.lineWidth = 1;
                                    ctx.fillStyle = "#000000";
                                    ctx.textAlign = 'center';

                                    if (array[i].coordinates.axisY.size > 0) {
                                        // main bar
                                        ctx.beginPath();
                                        ctx.moveTo(array[i].coordinates.axisY.x + marge_gauche, array[i].coordinates.axisY.y - (array[i].coordinates.axisY.size / 2) + marge_haut);
                                        ctx.lineTo(array[i].coordinates.axisY.x + marge_gauche, array[i].coordinates.axisY.y + (array[i].coordinates.axisY.size / 2) + marge_haut);
                                        ctx.fill();
                                        ctx.stroke();
                                        ctx.closePath();
                                    }

                                    ctx.strokeStyle = "#000000";
                                    ctx.fillStyle = "#000000";
                                }
                            }
                        }
                    });
                }

                function drawMeasurementValues(ctx) {

                    var axis;

                    angular.forEach(scope.positions, function(array, type_position){
                        if(scope.options.dimensionsType[type_position]) {
                            for (var i = 0; i < array.length; i++) {

                                if(scope.selectedDimension && array[i] == scope.selectedDimension.position) {
                                    axis = scope.selectedDimension.axis;
                                }
                                else{
                                    axis = '';
                                }

                                if(array[i].coordinates != undefined) {

                                    // Start by drawing X measurement value

                                    ctx.strokeStyle = "#0000A8";
                                    ctx.lineWidth = 1;
                                    ctx.fillStyle = "#000000";
                                    ctx.textAlign = 'center';

                                    if (array[i].coordinates.axisX.size > 0) {
                                        ctx.font = "9pt verdana";
                                        if (axis == 'x')
                                            ctx.fillStyle = "#ff0000";
                                        var profondeurReelle = Math.round(array[i].coordinates.axisX.size / coef);
                                        var textX = profondeurReelle + " mm";
                                        ctx.fillText(textX, array[i].coordinates.axisX.x + marge_gauche, array[i].coordinates.axisX.y - 2 + marge_haut);
                                    }

                                    // Onto Y measurement value

                                    ctx.strokeStyle = "#0000A8";
                                    ctx.lineWidth = 1;
                                    ctx.fillStyle = "#000000";
                                    ctx.textAlign = 'center';

                                    if (array[i].coordinates.axisY.size > 0) {
                                        // We do all of that to write it vertically !
                                        ctx.save();

                                        ctx.translate(array[i].coordinates.axisY.x + marge_gauche, array[i].coordinates.axisY.y + marge_haut);
                                        ctx.rotate(-Math.PI / 2);

                                        // Value
                                        ctx.font = "9pt verdana";
                                        if (axis == 'y')
                                            ctx.fillStyle = "#ff0000";
                                        var largeurReelle = Math.round(array[i].coordinates.axisY.size / coef);
                                        var textY = largeurReelle + " mm";
                                        ctx.fillText(textY, 0, -2);

                                        ctx.restore();
                                    }

                                    ctx.strokeStyle = "#000000";
                                    ctx.fillStyle = "#000000";
                                }
                            }
                        }
                    });
                }


                function drawAxes(ctx, canvasSize_x, canvasSize_y){

                    drawDashedLine(ctx, 0, canvasSize_y/2, canvasSize_x, canvasSize_y/2, 3, 3);
                    drawDashedLine(ctx, canvasSize_x/2, 0, canvasSize_x/2, canvasSize_y, 3, 3);

                }

                function drawDashedLine(ctx, x, y, x2, y2, dash, gap){

                    var step = dash + gap;

                    var distance = Math.sqrt(sqr(y2 - y) + sqr(x2 - x));

                    var current = {
                        x: x,
                        y: y
                    };

                    var xVariation = x2 - x != 0 ? 1 : 0;
                    var yVariation = y2 - y != 0 ? 1 : 0;

                    ctx.lineWidth = 1;
                    ctx.strokeStyle = "#999999";

                    ctx.beginPath();
                    ctx.moveTo(x, y);

                    while(distance > step){

                        current.x += xVariation * dash; current.y += yVariation * dash;
                        ctx.lineTo(current.x, current.y);
                        current.x += xVariation * gap; current.y += yVariation * gap;
                        ctx.moveTo(current.x, current.y);

                        distance -= step;
                    }

                    ctx.fill();
                    ctx.stroke();
                    ctx.closePath();

                    ctx.lineWidth = 2;
                    ctx.strokeStyle = "#000000";
                }


                function drawMap() {

                    var plan = $("#plan");

                    // pour fixer la taille du canvas sinon il fait un zoom
                    plan.attr("width", plan.width());
                    plan.attr("height", plan.height());


                    // on garde une mage de 20px (gauche et haut), 60px (droite et bas)
                    var taileMaxX = plan.width() - (marge_gauche + marge_droite);
                    var taileMaxY = plan.height() - (marge_haut + marge_bas);


                    // calcul du coef du plan
                    var coef_x = taileMaxX / longueur_mm;
                    var coef_y = taileMaxY / largeur_mm;


                    if (coef_x < coef_y) {
                        coef = coef_x;
                    } else {
                        coef = coef_y;
                    }

                    canvasSize_x = longueur_mm * coef;
                    canvasSize_y = largeur_mm * coef;

                    var canvasTotalSize_x = canvasSize_x + marge_gauche + marge_droite  ;
                    var canvasTotalSize_y = canvasSize_y + marge_haut + marge_bas ;

                    var moncanvas = document.getElementById("plan");
                    var ctx = moncanvas.getContext("2d");

                    // met un fond blanc
                    ctx.fillStyle = "#ffffff";
                    ctx.fillRect(0, 0, plan.width(), plan.height());

                    ctx.strokeStyle = "#000000";

                    if (coef) {

                        // dessine la limite de la bache
                        ctx.lineWidth = 2;
                        ctx.strokeRect(marge_gauche, marge_haut, canvasSize_x, canvasSize_y);

                        if(scope.options.axes)
                            drawAxes(ctx, canvasTotalSize_x, canvasTotalSize_y);

                        if(scope.options.enroulement)
                            drawEnroulement(ctx, scope.options.enroulementDirection, canvasSize_x, canvasTotalSize_y);

                        var largeurMarquage = canvasSize_x * 0.05 ;
                        if(scope.options.marquage)
                            drawMarquage(ctx, scope.options.marquagePosition, largeurMarquage, canvasSize_x, canvasSize_y);

                        if(scope.options.dimensions && scope.options.dimensionsType.citern)
                            drawCiternMeasure(ctx, canvasSize_x, canvasSize_y);

                        if(scope.options.dimensions)
                            drawMeasurementLines(ctx);

                        var couleurActif = "#00dd00" ;
                        var couleurInactif = "#ffffff" ;
                        var couleurBorderDefault = "#000000" ;
                        var couleurBorderSelected = "#ff0000" ;

                        angular.forEach(scope.positions, function(position, type_position){
                            for(var i = 0; i < position.length; i++){
                                var couleurFond = couleurInactif;
                                var couleurBorder = couleurBorderDefault;
                                var lineWidth = 1;
                                var x; var y; var largeurPoint;

                                if(scope.hasProduct(position[i]))
                                    couleurFond = couleurActif;

                                if(position[i] == scope.clickedPosition) {
                                    couleurBorder = couleurBorderSelected;
                                    lineWidth = 5;
                                }

                                if(scope.options.only_active){
                                    if(couleurFond == couleurActif) {

                                        x = (position[i].x * coef) + marge_gauche;
                                        y = (position[i].y * coef) + marge_haut;

                                        if (type_position == 'fond') {
                                            largeurPoint = canvasSize_x * 0.07;
                                            drawFond(ctx, x, y, largeurPoint, 'Fo.' + i, couleurFond, couleurBorder, lineWidth);
                                        }
                                        else if (type_position == 'tropPlein') {
                                            largeurPoint = canvasSize_x * 0.035;
                                            drawPosition(ctx, x, y, largeurPoint, 'TP.' + i, couleurFond, couleurBorder, lineWidth);
                                        }
                                        else if (type_position == 'event') {
                                            largeurPoint = canvasSize_x * 0.035;
                                            drawPosition(ctx, x, y, largeurPoint, 'Ev.' + i, couleurFond, couleurBorder, lineWidth);
                                        }
                                        else {
                                            largeurPoint = canvasSize_x * 0.035;
                                            drawPosition(ctx, x, y, largeurPoint, 'Fl.' + i, couleurFond, couleurBorder, lineWidth);
                                        }
                                    }
                                }
                                else{
                                    x = (position[i].x * coef) + marge_gauche ;
                                    y = (position[i].y * coef) + marge_haut ;

                                    if(type_position == 'fond'){
                                        largeurPoint = canvasSize_x * 0.07 ;
                                        drawFond(ctx, x, y, largeurPoint, 'Fo.'+i, couleurFond, couleurBorder, lineWidth);
                                    }
                                    else if(type_position == 'tropPlein'){
                                        largeurPoint = canvasSize_x * 0.035 ;
                                        drawPosition(ctx, x, y, largeurPoint, 'TP.'+i, couleurFond, couleurBorder, lineWidth);
                                    }
                                    else if(type_position == 'event'){
                                        largeurPoint = canvasSize_x * 0.035 ;
                                        drawPosition(ctx, x, y, largeurPoint, 'Ev.'+i, couleurFond, couleurBorder, lineWidth);
                                    }
                                    else{
                                        largeurPoint = canvasSize_x * 0.035 ;
                                        drawPosition(ctx, x, y, largeurPoint, 'Fl.'+i, couleurFond, couleurBorder, lineWidth);
                                    }
                                }
                            }

                        });

                        if(scope.options.dimensions)
                            drawMeasurementValues(ctx);


                    }


                    // action sur le clic
                    moncanvas.onmousedown = function (e) {

                        var radius = longueur_mm * 0.035;

                        if ($rootScope.$$phase) {
                            scope.$evalAsync(function(){
                                scope.clickedPosition = false;
                                delete scope.selectedDimension;
                            });
                        } else {
                            scope.$apply(function(){
                                scope.clickedPosition = false;
                                delete scope.selectedDimension;
                            });
                        }

                        angular.forEach(scope.positions, function(positionArr, type_position) {
                            for (var j = 0; j < positionArr.length; j++) {
                                if (( (scope.options.only_active && scope.hasProduct(positionArr[j])) || !scope.options.only_active )) {
                                    if (((parseFloat(positionArr[j].x) - radius) * coef + marge_gauche) <= e.offsetX && ((parseFloat(positionArr[j].x) + radius) * coef + marge_gauche) >= e.offsetX
                                        && ((parseFloat(positionArr[j].y) - radius) * coef + marge_haut) <= e.offsetY && ((parseFloat(positionArr[j].y) + radius) * coef + marge_haut) >= e.offsetY) {
                                        if ($rootScope.$$phase) {
                                            scope.$evalAsync(function () {
                                                scope.clickedPosition = positionArr[j];
                                            });
                                        } else {
                                            scope.$apply(function () {
                                                scope.clickedPosition = positionArr[j];
                                            });
                                        }
                                        if (type_position != 'tropPlein' && type_position != 'event') {
                                            dragging = $timeout(function (position) {
                                                grabbedPosition = position;
                                            }, 100, true, positionArr[j]);
                                        }
                                    }
                                    if(scope.options.dimensions && scope.options.dimensionsType[type_position] && type_position != 'tropPlein' && type_position != 'event') {

                                        if(positionArr[j].coordinates != undefined) {

                                            // X measurement
                                            if (positionArr[j].coordinates.axisX.size > 0) {
                                                ctx.font = "9pt verdana";
                                                var profondeurReelle = Math.round(positionArr[j].coordinates.axisX.size / coef);
                                                var textX = profondeurReelle + " mm";
                                                var textXWidth = ctx.measureText(textX).width;
                                                if ((positionArr[j].coordinates.axisX.x - textXWidth / 2 + marge_gauche) <= e.offsetX &&
                                                    (positionArr[j].coordinates.axisX.x + textXWidth / 2 + marge_gauche) >= e.offsetX &&
                                                    (positionArr[j].coordinates.axisX.y - 11 + marge_haut) <= e.offsetY &&
                                                    (positionArr[j].coordinates.axisX.y - 2 + marge_haut) >= e.offsetY) {

                                                    positionArr[j].x = parseInt(positionArr[j].x);
                                                    if ($rootScope.$$phase) {
                                                        scope.$evalAsync(function () {
                                                            scope.selectedDimension = {
                                                                name: type_position.charAt(0).toUpperCase() + type_position.slice(1, 2) + '.' + j,
                                                                position: positionArr[j],
                                                                value: Math.round(positionArr[j].coordinates.axisX.size / coef),
                                                                axis: "x"
                                                            };
                                                        });
                                                    } else {
                                                        scope.$apply(function () {
                                                            scope.selectedDimension = {
                                                                name: type_position.charAt(0).toUpperCase() + type_position.slice(1, 2) + '.' + j,
                                                                position: positionArr[j],
                                                                value: Math.round(positionArr[j].coordinates.axisX.size / coef),
                                                                axis: "x"
                                                            };
                                                        });
                                                    }
                                                    break;
                                                }
                                            }
                                            // Y measurement
                                            if (positionArr[j].coordinates.axisY.size > 0) {
                                                ctx.font = "9pt verdana";
                                                var largeurReelle = Math.round(positionArr[j].coordinates.axisY.size / coef);
                                                var textY = largeurReelle + " mm";
                                                var textYWidth = ctx.measureText(textY).width;
                                                if ((positionArr[j].coordinates.axisY.y - textYWidth / 2 + marge_haut) <= e.offsetY &&
                                                    (positionArr[j].coordinates.axisY.y + textYWidth / 2 + marge_haut) >= e.offsetY &&
                                                    (positionArr[j].coordinates.axisY.x - 11 + marge_gauche) <= e.offsetX &&
                                                    (positionArr[j].coordinates.axisY.x - 2 + marge_gauche) >= e.offsetX) {

                                                    positionArr[j].y = parseInt(positionArr[j].y);
                                                    if ($rootScope.$$phase) {
                                                        scope.$evalAsync(function () {
                                                            scope.selectedDimension = {
                                                                name: type_position.charAt(0).toUpperCase() + type_position.slice(1, 2) + '.' + j,
                                                                position: positionArr[j],
                                                                value: Math.round(positionArr[j].coordinates.axisY.size / coef),
                                                                axis: "y"
                                                            };
                                                        });
                                                    } else {
                                                        scope.$apply(function () {
                                                            scope.selectedDimension = {
                                                                name: type_position.charAt(0).toUpperCase() + type_position.slice(1, 2) + '.' + j,
                                                                position: positionArr[j],
                                                                value: Math.round(positionArr[j].coordinates.axisY.size / coef),
                                                                axis: "y"
                                                            };
                                                        });
                                                    }
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        });
                        drawMap();
                    };


                    moncanvas.onmouseup = function () {
                        if(grabbedPosition){
                            scope.updatePositions()();
                        }
                        grabbedPosition = false;
                        if(dragging)
                            $timeout.cancel(dragging);
                        drawMap();
                    };


                    moncanvas.onmousemove = function (e) {
                        var hideCursor = true ;

                        var radius = longueur_mm * 0.035;

                        // recherche si la souris est dans la zone d'un point
                        angular.forEach(scope.positions, function(positionArr, type_position){
                            if(type_position != 'tropPlein' && type_position != 'event') {
                                for (var j = 0; j < positionArr.length; j++) {
                                    if(( (scope.options.only_active && scope.hasProduct(positionArr[j])) || !scope.options.only_active )) {
                                        if (((parseFloat(positionArr[j].x) - radius) * coef + marge_gauche) <= e.offsetX &&
                                            ((parseFloat(positionArr[j].x) + radius) * coef + marge_gauche) >= e.offsetX &&
                                            ((parseFloat(positionArr[j].y) - radius) * coef + marge_haut) <= e.offsetY &&
                                            ((parseFloat(positionArr[j].y) + radius) * coef + marge_haut) >= e.offsetY) {
                                            $("#plan").css("cursor", "pointer");
                                            hideCursor = false;
                                            break;
                                        }
                                    }
                                    // Ou dans la zone d'une dimension si elles sont affichées
                                    if(scope.options.dimensions && scope.options.dimensionsType[type_position]) {


                                        if(positionArr[j].coordinates != undefined) {

                                            if (positionArr[j].coordinates.axisX.size > 0) {
                                                ctx.font = "9pt verdana";
                                                var profondeurReelle = Math.round(positionArr[j].coordinates.axisX.size / coef);
                                                var textX = profondeurReelle + " mm";
                                                var textXWidth = ctx.measureText(textX).width;
                                                if ((positionArr[j].coordinates.axisX.x - textXWidth / 2 + marge_gauche) <= e.offsetX &&
                                                    (positionArr[j].coordinates.axisX.x + textXWidth / 2 + marge_gauche) >= e.offsetX &&
                                                    (positionArr[j].coordinates.axisX.y - 11 + marge_haut) <= e.offsetY &&
                                                    (positionArr[j].coordinates.axisX.y - 2 + marge_haut) >= e.offsetY) {
                                                    $("#plan").css("cursor", "pointer");
                                                    hideCursor = false;
                                                    break;
                                                }
                                            }
                                            // Y measurement
                                            if (positionArr[j].coordinates.axisY.size > 0) {
                                                ctx.font = "9pt verdana";
                                                var largeurReelle = Math.round(positionArr[j].coordinates.axisY.size / coef);
                                                var textY = largeurReelle + " mm";
                                                var textYWidth = ctx.measureText(textY).width;
                                                if ((positionArr[j].coordinates.axisY.y - textYWidth / 2 + marge_haut) <= e.offsetY &&
                                                    (positionArr[j].coordinates.axisY.y + textYWidth / 2 + marge_haut) >= e.offsetY &&
                                                    (positionArr[j].coordinates.axisY.x - 11 + marge_gauche) <= e.offsetX &&
                                                    (positionArr[j].coordinates.axisY.x - 2 + marge_gauche) >= e.offsetX) {
                                                    $("#plan").css("cursor", "pointer");
                                                    hideCursor = false;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        });

                        if (hideCursor) {
                            $("#plan").css("cursor", "default");
                        }

                        if(grabbedPosition){ // Currently dragging a position
                            if(grabbedPosition.x == 0 || grabbedPosition.x == longueur_mm){ // We are moving a left or right flanc position, so we only allow y-axis movement
                                if(e.offsetY >= (1000*coef + marge_haut) && e.offsetY <= ((largeur_mm - 1000)*coef + marge_haut))
                                    grabbedPosition.y = (e.offsetY - marge_haut) / coef;
                                else if(e.offsetY < (1000*coef + marge_haut))
                                    grabbedPosition.y = 1000;
                                else
                                    grabbedPosition.y = largeur_mm - 1000;
                            }
                            else if (grabbedPosition.y == 0 || grabbedPosition.y == largeur_mm){ // We are moving a top or bottom flanc position, so we only allow x-axis movement
                                if(e.offsetX >= (1000*coef + marge_gauche) && e.offsetX <= ((longueur_mm - 1000)*coef + marge_gauche))
                                    grabbedPosition.x = (e.offsetX - marge_gauche) / coef;
                                else if(e.offsetX < (1000*coef + marge_gauche))
                                    grabbedPosition.x = 1000;
                                else
                                    grabbedPosition.x = longueur_mm - 1000;
                            }
                            else{ // We are moving a fond position, we can move on both axis
                                // Y
                                if(e.offsetY >= (1000*coef + marge_haut) && e.offsetY <= ((largeur_mm - 1000)*coef + marge_haut))
                                    grabbedPosition.y = (e.offsetY - marge_haut) / coef;
                                else if(e.offsetY < (1000*coef + marge_haut))
                                    grabbedPosition.y = 1000;
                                else
                                    grabbedPosition.y = largeur_mm - 1000;
                                // X
                                if(e.offsetX >= (1000*coef + marge_gauche) && e.offsetX <= ((longueur_mm - 1000)*coef + marge_gauche))
                                    grabbedPosition.x = (e.offsetX - marge_gauche) / coef;
                                else if(e.offsetX < (1000*coef + marge_gauche))
                                    grabbedPosition.x = 1000;
                                else
                                    grabbedPosition.x = longueur_mm - 1000;
                            }
                            grabbedPosition.x = Math.round(grabbedPosition.x);
                            grabbedPosition.y = Math.round(grabbedPosition.y);
                            getMeasurementsCoordinates();
                            drawMap();
                        }
                    };
                }
            }
        }
});
app.config(['$routeProvider',
    function ($routeProvider) {
        $routeProvider
            .when('/ng/fr_abeko/plan', {
                templateUrl: '/fr_abeko/plan/search',
                controller: 'FrAbekoPlanListCtrl'
            })
            .when('/ng/fr_abeko/plan/view/:id', {
                templateUrl: '/fr_abeko/plan/view',
                controller: 'FrAbekoPlanViewCtrl'
            })
            .when('/ng/fr_abeko/plan/form', {
                templateUrl: '/fr_abeko/plan/form',
                controller: 'FrAbekoPlanFormCtrl'
            })
        ;
    }]);
app.controller('***** sauvegarde *******FrAbekoPlanViewCtrl*************', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', '$uibModal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, $uibModal) {

        $scope.$parent.loadMenu("fr_abeko", "fr_abeko_plan");


        $scope.$on("$destroy", function() {
            $(window).off( "resize");
            $(".updateDrawMap").off("keyup");
        });


        $(window).resize(function () {
            drawMap() ;
        }) ;

        $(".updateDrawMap").keyup(function () {
            drawMap() ;
        }) ;





        /************* paramètre *************/
        var marge_gauche = 50 ;
        var marge_droite = 50 ;
        var marge_haut = 40 ;
        var marge_bas = 60 ;
        /************* END : paramètre *************/




        /************* initialisation de variable *************/
        var coef = 1;
        var tabPoint = [];
        $scope.tabPointPiece = [];
        /************* END : initialisation de variable *************/






        $scope.removePiece = function(idPiece) {
            for (var i = 0 ; i < $scope.tabPointPiece.length ; i++) {
                if ($scope.tabPointPiece[i].idTemp == idPiece) {
                    $scope.tabPointPiece.splice(i, 1);

                    // raffraichi le plan
                    drawMap();

                    break;
                }
            }
        };



        $scope.downloadPDF = function() {
            downloadURI("/assets/plan.pdf", "plan.pdf");
        }


        function downloadURI(uri, name) {
            var link = document.createElement("a");
            link.download = name;
            link.href = uri;
            link.click();
        }




        function makeid()
        {
            var text = "";
            var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

            for( var i=0; i < 10; i++ )
                text += possible.charAt(Math.floor(Math.random() * possible.length));

            return text;
        }

        var getNumberTxt = function (value) {
            if (isNaN(value) && value && value != null) {
                value = value.replace(",", ".");
                value = value * 1;
            } else if (isNaN(value)) {
                value = 0;
            }
            value = value * 1

            return value;
        }

        function sqr(a) {
            return a*a;
        }

        function Distance(x1, y1, x2, y2) {
            return Math.sqrt(sqr(y2 - y1) + sqr(x2 - x1));
        }


        function calculAngle(x1, y1, x2, y2) {
            var aa = x2 - x1 ;
            var bb = y2 - y1 ;
            var cc = Distance(x1, y1, x2, y2) ;

            var alpha = 180/Math.PI*Math.acos((bb*bb-(-cc*cc)-aa*aa)/(2*bb*cc))
            if (isNaN(alpha)) {
                alpha = 0 ;
            }

            return alpha ;
        }






        function drawMeasure(ctx, x1, y1, x2, y2, decalage) {


            var mesure = Distance(x1, y1, x2, y2);
            var mesure_coef = mesure * coef ;




            // determine le centre de la droite
            var xCentre = 0;
            var yCentre = 0;

            if (x2 >= x1) {
                xCentre = ((x2 - x1) / 2) + x1;
            } else {
                xCentre = ((x1 - x2) / 2) + x2;
            }

            if (y2 >= y1) {
                yCentre = ((y2 - y1) / 2) + y1;
            } else {
                yCentre = ((y1 - y2) / 2) + y2;
            }


            // determine l'angle de la droite
            var alpha = calculAngle(x1, y1, x2, y2);





            ctx.save();

            ctx.translate((xCentre*coef) + marge_gauche, (yCentre*coef) + marge_haut);


            // rotation si la ligne n'est pas droite
            if (alpha != 0) {
                ctx.rotate((90-alpha) * Math.PI / 180);
            }

            // decalage de ligne
            ctx.translate(0, decalage);


            // parametre de la ligne
            ctx.lineWidth = 1;
            ctx.strokeStyle = "#000000";
            ctx.fillStyle = "#000000" ;


            // barre horizontale
            ctx.beginPath();
            ctx.moveTo((mesure_coef/2)*-1, 0);
            ctx.lineTo((mesure_coef/2), 0);
            ctx.fill();
            ctx.stroke();

            // barre verticale gauche
            ctx.beginPath();
            ctx.moveTo((mesure_coef/2)*-1, -10);
            ctx.lineTo((mesure_coef/2)*-1, 10);
            ctx.fill();
            ctx.stroke();

            // barre verticale droite
            ctx.beginPath();
            ctx.moveTo((mesure_coef/2), -10);
            ctx.lineTo((mesure_coef/2), 10);
            ctx.fill();
            ctx.stroke();

            ctx.translate(0, 15);
            ctx.font = "9pt verdana";
            ctx.textAlign = 'center';
            ctx.fillText((Math.round(mesure*100)/100) + " mm", 0, 0);


            ctx.restore();

        }






        function positionHasData(idPosition) {
            var dataTrouvee = false ;

            for (var i = 0 ; i < $scope.tabPointPiece.length ; i++) {
                if ($scope.tabPointPiece[i].idPoint == idPosition) {
                    dataTrouvee = true ;
                    break;
                }
            }

            return dataTrouvee ;
        }





        function drawMap() {
            var decalage_mesure = 30 ;


            tabPoint = [];




            // pour fixer la taille du canvas sinon il fait un zoom
            $("#plan").attr("width", $("#plan").width());
            $("#plan").attr("height", $("#plan").height());


            // on garde une mage de 20px (gauche et haut), 60px (droite et bas)
            var taileMaxX = $("#plan").width() - (marge_gauche + marge_droite);
            var taileMaxY = $("#plan").height() - (marge_haut + marge_bas);



            // calcul du coef du plan
            var longueur_mm = getNumberTxt($("#longueur").val()) * 1000;
            var largeur_mm = getNumberTxt($("#largeur").val()) * 1000;

            var coef_x = taileMaxX / longueur_mm;
            var coef_y = taileMaxY / largeur_mm;


            if (coef_x < coef_y) {
                coef = coef_x;
            } else {
                coef = coef_y;
            }



            var dimension_position = getNumberTxt($("#diametre_position").val());
            var nb_position_longueur = getNumberTxt($("#nb_position_longueur").val());
            var nb_position_largeur = getNumberTxt($("#nb_position_largeur").val());
            var espace_position_longueur = getNumberTxt($("#espace_position_longueur").val());
            var espace_position_largeur = getNumberTxt($("#espace_position_largeur").val());
            var espace_bordure_position_longueur = getNumberTxt($("#espace_bordure_position_longueur").val());
            var espace_bordure_position_largeur = getNumberTxt($("#espace_bordure_position_largeur").val());






            var moncanvas = document.getElementById("plan");
            var ctx = moncanvas.getContext("2d");



            // met un fond blanc
            ctx.fillStyle = "#ffffff";
            ctx.fillRect(0, 0, $("#plan").width(), $("#plan").height());







            ctx.strokeStyle = "#000000";


            if (coef) {

                // dessine la limite de la bache
                ctx.lineWidth = 2;
                ctx.strokeRect(marge_gauche, marge_haut, longueur_mm * coef, largeur_mm * coef);





                // affiche les mesures de la citerne
                drawMeasure(ctx, 0, largeur_mm, longueur_mm, largeur_mm, decalage_mesure) ;
                drawMeasure(ctx, longueur_mm, largeur_mm, longueur_mm, 0, decalage_mesure) ;








                // calcul la distance entre 2 position
                var dim_entre_point_longueur = (longueur_mm - (espace_bordure_position_longueur*2) - dimension_position) / (nb_position_longueur-1) ;
                var dim_entre_point_largeur = (largeur_mm - (espace_bordure_position_longueur*2) - dimension_position) / (nb_position_largeur-1) ;
                var posDepart_x = espace_bordure_position_longueur + (dimension_position / 2) ;
                var posDepart_y = espace_bordure_position_largeur + (dimension_position / 2) ;

                var dimRondPosition = dimension_position*coef ;
                if (dimRondPosition < 10) {
                    dimRondPosition = 10 ;
                }

                var idPosition = 0 ;
                ctx.font = "11pt verdana";
                ctx.textAlign = 'center';


                for (var i = 1 ; i <= nb_position_longueur ; i++) {
                    var position_x = posDepart_x + (dim_entre_point_longueur * (i-1)) ;
                    position_x *= coef ;
                    position_x += marge_gauche ;

                    var position_y_haut = espace_bordure_position_largeur + (dimension_position / 2) ;
                    position_y_haut *= coef ;
                    position_y_haut += marge_haut ;


                    var position_y_bas = largeur_mm - (espace_bordure_position_largeur + (dimension_position / 2)) ;
                    position_y_bas *= coef ;
                    position_y_bas += marge_haut ;





                    // point du haut
                    idPosition++;
                    if (positionHasData(idPosition)) {
                        ctx.fillStyle = "#00dd00" ;
                    } else {
                        ctx.fillStyle = "#ffffff" ;
                    }

                    ctx.beginPath();
                    ctx.lineWidth = 1 ;
                    ctx.arc(position_x, position_y_haut, dimRondPosition, 0, Math.PI*2, true);
                    ctx.fill();
                    ctx.stroke();

                    // ecrit le n° de la position
                    ctx.fillStyle = "#000000" ;
                    ctx.fillText(idPosition, position_x, position_y_haut+5);


                    // enregistre le point
                    tabPoint.push({id:idPosition, x1:position_x-dimRondPosition, y1:position_y_haut-dimRondPosition, x2: position_x+dimRondPosition, y2:position_y_haut+dimRondPosition});



                    // dessine la mesure
                    if (i == 1) {
                        x1 = 0 ;
                        y1 = (position_y_haut-marge_haut) / coef ;
                        x2 = (position_x-marge_gauche) / coef ;
                        y2 = (position_y_haut-marge_haut) / coef ;
                    } else {
                        x1 = (position_x-marge_gauche) / coef - dim_entre_point_longueur ;
                        y1 = (position_y_haut-marge_haut) / coef ;
                        x2 = (position_x-marge_gauche) / coef ;
                        y2 = (position_y_haut-marge_haut) / coef ;
                    }
                    drawMeasure(ctx, x1, y1, x2, y2, decalage_mesure) ;


                    if (nb_position_longueur == i) {
                        x1 = (position_x-marge_gauche) / coef ;
                        y1 = (position_y_haut-marge_haut) / coef ;
                        x2 = longueur_mm ;
                        y2 = (position_y_haut-marge_haut) / coef ;

                        drawMeasure(ctx, x1, y1, x2, y2, decalage_mesure) ;
                    }







                    // point du bas
                    idPosition++;

                    if (positionHasData(idPosition)) {
                        ctx.fillStyle = "#00dd00" ;
                    } else {
                        ctx.fillStyle = "#ffffff" ;
                    }

                    ctx.beginPath();
                    ctx.lineWidth = 1 ;
                    ctx.arc(position_x, position_y_bas, dimRondPosition, 0, Math.PI*2, true);
                    ctx.fill();
                    ctx.stroke();

                    // ecrit le n° de la position
                    ctx.fillStyle = "#000000" ;
                    ctx.fillText(idPosition, position_x, position_y_bas+5);


                    // enregistre le point
                    tabPoint.push({id:idPosition, x1:position_x-dimRondPosition, y1:position_y_bas-dimRondPosition, x2: position_x+dimRondPosition, y2:position_y_bas+dimRondPosition});


                }








                for (var i = 2 ; i < nb_position_largeur ; i++) {
                    var position_x_gauche = espace_bordure_position_longueur + (dimension_position / 2) ;
                    position_x_gauche *= coef ;
                    position_x_gauche += marge_gauche ;

                    var position_x_droite = longueur_mm - (espace_bordure_position_longueur + (dimension_position / 2)) ;
                    position_x_droite *= coef ;
                    position_x_droite += marge_gauche ;

                    var position_y = posDepart_y + (dim_entre_point_largeur * (i-1)) ;
                    position_y *= coef ;
                    position_y += marge_haut ;



                    // point du gauche
                    idPosition++;

                    if (positionHasData(idPosition)) {
                        ctx.fillStyle = "#00dd00" ;
                    } else {
                        ctx.fillStyle = "#ffffff" ;
                    }

                    ctx.beginPath();
                    ctx.lineWidth = 1 ;
                    ctx.arc(position_x_gauche, position_y, dimRondPosition, 0, Math.PI*2, true);
                    ctx.fill();
                    ctx.stroke();

                    // ecrit le n° de la position
                    ctx.fillStyle = "#000000" ;
                    ctx.fillText(idPosition, position_x_gauche, position_y+5);

                    // enregistre le point
                    tabPoint.push({id:idPosition, x1:position_x_gauche-dimRondPosition, y1:position_y-dimRondPosition, x2: position_x_gauche+dimRondPosition, y2:position_y+dimRondPosition});




                    // dessine la mesure
                    if (i == 2) {
                        x1 = (position_x_gauche-marge_gauche) / coef ;
                        y1 = (position_y-marge_haut) / coef  - dim_entre_point_largeur ;
                        x2 = (position_x_gauche-marge_gauche) / coef ;
                        y2 = 0 ;
                        drawMeasure(ctx, x1, y1, x2, y2, decalage_mesure) ;


                        x1 = (position_x_gauche-marge_gauche) / coef ;
                        y1 = (position_y-marge_haut) / coef ;
                        x2 = (position_x_gauche-marge_gauche) / coef ;
                        y2 = (position_y-marge_haut) / coef  - dim_entre_point_largeur ;
                        drawMeasure(ctx, x1, y1, x2, y2, decalage_mesure) ;
                    } else {
                        x1 = (position_x_gauche-marge_gauche) / coef ;
                        y1 = (position_y-marge_haut) / coef ;
                        x2 = (position_x_gauche-marge_gauche) / coef ;
                        y2 = (position_y-marge_haut) / coef - dim_entre_point_largeur ;
                        drawMeasure(ctx, x1, y1, x2, y2, decalage_mesure) ;
                    }


                    if (i == (nb_position_largeur-1)) {
                        x1 = (position_x_gauche-marge_gauche) / coef ;
                        y1 = (position_y-marge_haut) / coef + dim_entre_point_largeur ;
                        x2 = (position_x_gauche-marge_gauche) / coef ;
                        y2 = (position_y-marge_haut) / coef  ;
                        drawMeasure(ctx, x1, y1, x2, y2, decalage_mesure) ;

                        x1 = (position_x_gauche-marge_gauche) / coef ;
                        y1 = largeur_mm ;
                        x2 = (position_x_gauche-marge_gauche) / coef ;
                        y2 = (position_y-marge_haut) / coef + dim_entre_point_largeur  ;
                        drawMeasure(ctx, x1, y1, x2, y2, decalage_mesure) ;
                    }



                    // point du droite
                    idPosition++;

                    if (positionHasData(idPosition)) {
                        ctx.fillStyle = "#00dd00" ;
                    } else {
                        ctx.fillStyle = "#ffffff" ;
                    }

                    ctx.beginPath();
                    ctx.lineWidth = 1 ;
                    ctx.arc(position_x_droite, position_y, dimRondPosition, 0, Math.PI*2, true);
                    ctx.fill();
                    ctx.stroke();

                    // ecrit le n° de la position
                    ctx.fillStyle = "#000000" ;
                    ctx.fillText(idPosition, position_x_droite, position_y+5);

                    // enregistre le point
                    tabPoint.push({id:idPosition, x1:position_x_droite-dimRondPosition, y1:position_y-dimRondPosition, x2: position_x_droite+dimRondPosition, y2:position_y+dimRondPosition});
                }


                // affichage de l'icone danger si ecart sont inférieur à la norme
                if (dim_entre_point_longueur < espace_position_longueur || dim_entre_point_largeur < espace_position_largeur) {
                    var imageObj = new Image();
                    imageObj.onload = function() {
                        ctx.drawImage(this, 0, 0);
                    };

                    imageObj.src = "/assets/cache/images/fr_abeko/danger.png";
                }
            }






            // action sur le clic
            moncanvas.onmousedown = function (e) {
                var idPoint = 0 ;


                // recherche si la souris est dans la zone d'un point
                for (var i = 0 ; i < tabPoint.length; i++) {
                    if (tabPoint[i].x1 <= e.offsetX && tabPoint[i].x2 >=e.offsetX && tabPoint[i].y1 <= e.offsetY && tabPoint[i].y2 >= e.offsetY) {

                        idPoint = tabPoint[i].id ;

                        var modalInstance = $uibModal.open({
                            animation: true,
                            templateUrl: '/fr_abeko/plan/modal',
                            controller: 'FrAbekoPlanModalInstanceCtrl',
                            size: 'lg',
                            resolve: {
                                /*items: function () {
                                    return $scope.items;
                                }*/
                            }
                        });

                        modalInstance.result.then(function (selectedItem) {
                            $scope.tabPointPiece.push({idPoint:idPoint, idPiece:1, libelle:"Vannes", qte:1, idTemp:makeid()});

                            // recharge la carte
                            drawMap();

                        }, function () {
                            //console.log("rien");
                        });
                        break;
                    }
                }
            }







            // pour afficher le pointer sur les rond des positions (zone carré en réalité)
            moncanvas.onmousemove = function (e) {
                // recherche si la souris est dans la zone d'un point
                var hideCursor = true ;
                for (var i = 0 ; i < tabPoint.length; i++) {
                    if (tabPoint[i].x1 <= e.offsetX && tabPoint[i].x2 >=e.offsetX && tabPoint[i].y1 <= e.offsetY && tabPoint[i].y2 >= e.offsetY) {
                        $("#plan").css("cursor", "pointer");
                        hideCursor = false ;
                        break;
                    }
                }

                if (hideCursor) {
                    $("#plan").css("cursor", "default");
                }
            }
        }







        drawMap() ;

    }]);
app.controller('FrAbekoPlanViewCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', '$q', '$uibModal', 'zeapps_modal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, $q, $uibModal, zeapps_modal) {

        $scope.$parent.loadMenu("fr_abeko", "fr_abeko_plan");


        $scope.addingPosition = false;
        $scope.deletingPosition = false;

        $scope.form = [];
        $scope.tarifs = [];

        $scope.newPosition = {
            type_position: '',
            position: {}
        };

        $scope.options = {
            axes: false,
            dimensions: false,
            dimensionsType: {
                citern: true,
                flanc: true,
                fond: true,
                tropPlein: true,
                event: true
            },
            enroulement: false,
            enroulementDirection: 1,
            marquage: false,
            marquagePosition: 'top',
            all: false,
            only_active: false
        };


        var loadPlan = function(){
            $http.get('/fr_abeko/plan/get/' + $routeParams.id).then(function (response) {
                if (response.data && response.data != "false") {
                    $scope.form = response.data;
                    $scope.options.largeur = response.data.largeur;
                    $scope.options.profondeur = response.data.profondeur;
                    $scope.options.marquagePosition = response.data.marquage;
                    $scope.options.enroulementDirection = response.data.enroulement;
                }
            });
        };
        var loadPositions = function(){
            $scope.positions = {
                flanc : [],
                fond : [],
                tropPlein : [],
                event : []
            };
            $http.get('/fr_abeko/plan/getPositions/' + $routeParams.id).then(function(response){
                if(response.data && response.data != "false"){
                    for(var i = 0; i < response.data.length; i++){
                        $scope.positions[response.data[i].type_position].push(response.data[i]);
                    }
                }
            });
        };
        var loadProduits = function(){
            $scope.produits = [];
            $scope.accessoires = [];
            $http.get('/fr_abeko/plan/getProduits/' + $routeParams.id).then(function(response){
                if(response.data && response.data != "false"){
                    for(var i = 0; i < response.data.length; i++){
                        if(response.data[i].id_position == 0){
                            $scope.accessoires.push(response.data[i]);
                        }
                        else{
                            $scope.produits.push(response.data[i]);
                        }
                    }
                }
            });
        };
        var init = function(){
            // charge la fiche
            if ($routeParams.id && $routeParams.id != 0) {
                loadPlan();
                loadPositions();
                loadProduits();
            } else {
                $location.path("/ng/fr_abeko/plan");
            }
        };
        init();

        $scope.toggleAdd = function(){
            $scope.addingPosition = !$scope.addingPosition;
        };

        $scope.toggleDelete = function(){
            $scope.deletingPosition = !$scope.deletingPosition;
        };

        $scope.showTropPleinOption = function(side){
            if($scope.newPosition.type_position == 'tropPlein') {
                if ($scope.options.profondeur && $scope.options.largeur) {
                    var halfwayProfondeur = ( parseFloat($scope.options.profondeur).toFixed(3) * 1000 ) / 2;
                    for (var i = 0; i < $scope.positions.tropPlein.length; i++) {
                        if (side == 'gauche' && parseInt($scope.positions.tropPlein[i].x) < halfwayProfondeur)
                            return false;
                        else if (side == 'droite' && parseInt($scope.positions.tropPlein[i].x) > halfwayProfondeur)
                            return false;
                    }
                }
                return true;
            }
            return false;
        };

        $scope.add = function(toggle){
            if($scope.newPosition.type_position != '') {
                var position = {
                    id_plan: $routeParams.id,
                    type_position: $scope.newPosition.type_position
                };

                var largeur = parseFloat($scope.options.largeur).toFixed(3) * 1000;
                var profondeur = parseFloat($scope.options.profondeur).toFixed(3) * 1000;

                if (position.type_position == 'event') {
                    position.x = parseInt(profondeur / 2);
                    position.y = parseInt(largeur / 2);
                }
                else if (position.type_position == 'tropPlein') {
                    position.y = parseInt(largeur / 2);

                    var offset = (parseFloat($scope.options.profondeur) / 6).toFixed(2);

                    if (offset > 1.6) {
                        offset = 1.80;
                    }
                    else {
                        offset[2] = offset[3] > 7 ? offset[2] + 1 : offset[2];
                        offset[3] = offset[3] > 7 ? 0 : ( offset[3] < 3 ? 0 : 5);
                    }

                    offset = parseFloat(offset).toFixed(3) * 1000;

                    if ($scope.newPosition.position.tropPlein == "droite")
                        position.x = profondeur - offset;
                    else
                        position.x = offset;
                }
                else if (position.type_position == 'flanc') {
                    if ($scope.newPosition.position.flanc == 'haut') {
                        position.x = 1500;
                        position.y = 0;
                    }
                    else if ($scope.newPosition.position.flanc == 'droite') {
                        position.x = profondeur;
                        position.y = 1500;
                    }
                    else if ($scope.newPosition.position.flanc == 'bas') {
                        position.x = 1500;
                        position.y = largeur;
                    }
                    else if ($scope.newPosition.position.flanc == 'gauche') {
                        position.x = 0;
                        position.y = 1500;
                    }
                }
                else {
                    position.x = 1500;
                    position.y = 1500;
                }

                var formatted_data = angular.toJson(position);
                $http.post('/fr_abeko/plan/addPosition/', formatted_data).then(function(response){
                    if(response.data && response.data != 'false'){
                        position.id = response.data;
                        $scope.positions[position.type_position].push(position);
                    }
                });

                if (toggle)
                    $scope.toggleAdd();

                $scope.newPosition = {
                    type_position: '',
                    position: {}
                };
            }
        };

        $scope.del = function(position){
            var defer = $q.defer();
            $http.get('/fr_abeko/plan/delPosition/' + position.id).then(function(response){
                if(response.data && response.data != 'false') {
                    angular.forEach($scope.positions, function (positionArr, type_position) {
                        if (positionArr.indexOf(position) > -1) {
                            if (positionArr.length > 1)
                                positionArr.splice(positionArr.indexOf(position), 1);
                            else
                                $scope.positions[type_position] = [];
                            for (var i = 0; i < $scope.produits.length; i++) {
                                if ($scope.produits[i].id_position == position.id) {
                                    $scope.produits.splice(i, 1);
                                }
                            }
                        }
                    });
                    defer.resolve();
                }
                else{
                    defer.reject();
                }
            });
            return defer.promise;
        };

        $scope.updatePositions = function(){

            var data = {
                positions: {}
            };

            data.positions = angular.toJson($scope.positions);
            data.positions = angular.fromJson(data.positions);

            angular.forEach(data.positions, function(positionArr){
                for(var i=0; i<positionArr.length; i++){
                    delete positionArr[i].coordinates;
                }
            });

            var formatted_data = angular.toJson(data);
            $http.post('/fr_abeko/plan/updatePosition/', formatted_data);
        };

        $scope.findPosition = function(produit){
            var position = '';
            var type = {
                flanc: 'Fl',
                fond: 'Fo',
                tropPlein: 'TP',
                event: 'Ev'
            };
            angular.forEach($scope.positions, function(positionArr, type_position){
                for(var i=0; i<positionArr.length; i++){
                    if(positionArr[i].id == produit.id_position){
                        position = type[type_position] + '.' + i;
                    }
                }
            });
            return position;
        };

        $scope.ajoutProduit = function(idPosition, type_position) {
            // charge la modal de la liste de produit
            zeapps_modal.loadModule("fr_abeko", "search_article_plan", {type_point:type_position, idCiterneType:$scope.form.id_citerne_type}, function(objReturn) {
                if (objReturn) {

                    var produit = {};

                    produit.id_plan = $routeParams.id;
                    produit.id_article_compose = objReturn.id ;
                    produit.type_position = type_position;
                    produit.id_position = idPosition;
                    produit.article = objReturn;

                    var data = {};

                    data.id_article_compose = produit.id_article_compose;
                    data.id_plan = produit.id_plan;
                    data.id_position = produit.id_position;

                    var formatted_data = angular.toJson(data);
                    $http.post('/fr_abeko/plan/addProduit/', formatted_data).then(function(response){
                        if(response.data && response.data != 'false'){
                            produit.id = response.data;
                            $scope.produits.push(produit);
                        }
                    });
                }
            });
        };

        $scope.deleteProduit = function(produit, arr) {
            $http.get('/fr_abeko/plan/delProduit/' + produit.id).then(function(response){
                console.log(response.data);
                if(response.data && response.data != 'false'){
                    if(arr == 'produit') {
                        $scope.produits.splice($scope.produits.indexOf(produit), 1);
                    }
                    else if(arr == 'accessoire') {
                        $scope.accessoires.splice($scope.accessoires.indexOf(produit), 1);
                    }
                }
            });
        };

        $scope.pdf = function () {
            // sauvegarde du plan avant de générer le PDF

            var data = {} ;

            if ($routeParams.id != 0) {
                data.id = $routeParams.id;
            }

            data.nom = $scope.form.nom ;
            data.enroulement = $scope.options.enroulementDirection ;
            data.marquage = $scope.options.marquagePosition ;

            var formatted_data = angular.toJson(data);


            $http.post('/fr_abeko/plan/save', formatted_data).then(function (response) {
                if(response.data && response.data != 'false') {

                    var plan = $("#plan");

                    plan.css("width", "700px");
                    plan.css("height", "500px");

                    var data = {};

                    var canvas = document.getElementById("plan");
                    data.form = $scope.form;
                    data.img = canvas.toDataURL("image/png");
                    data.produits = $scope.produits;
                    plan.css("width", "100%");
                    plan.css("height", "500px");


                    $http.post('/fr_abeko/plan/savePDF', data).then(function (response) {
                        if (response.data && response.data != 'false') {
                            window.document.location.href = '/fr_abeko/plan/downloadPDF';
                        }
                    });
                }

            });

        };

        $scope.cancel = function () {
            $location.path("/ng/fr_abeko/plan");
        }

    }]);
app.controller('FrAbekoCiterneTarifListCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', '$uibModal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, $uibModal) {

        $scope.$parent.loadMenu("fr_abeko", "fr_abeko_citerne_tarif");

        $scope.tarifs = [] ;


        var loadList = function () {
            var options = {};
            $http.post('/fr_abeko/tarifciterne/getAll', options).then(function (response) {
                if (response.status == 200) {
                    $scope.tarifs = response.data ;
                }
            });
        };
        loadList() ;



        $scope.duplicate = function(tarifId){
            $http.post('/fr_abeko/tarifciterne/duplicate/' + tarifId).then(function (response) {
                if (response.data) {
                    $scope.tarifs.push(response.data);
                }
            });
        };

        $scope.delete = function (argIdUser) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous supprimer définitivement ce tarif ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la suppression';
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {
                    $http.get('/fr_abeko/tarifciterne/delete/' + argIdUser).then(function (response) {
                        if (response.status == 200) {
                            loadList() ;
                        }
                    });
                }

            }, function () {
                //console.log("rien");
            });

        };

    }]);
app.config(['$routeProvider',
    function ($routeProvider) {
        $routeProvider
            .when('/ng/fr_abeko/citerne_tarif', {
                templateUrl: '/fr_abeko/tarifciterne/search',
                controller: 'FrAbekoCiterneTarifListCtrl'
            })
            .when('/ng/fr_abeko/citerne_tarif/new', {
                templateUrl: '/fr_abeko/tarifciterne/view',
                controller: 'FrAbekoCiterneTarifViewCtrl'
            })
            .when('/ng/fr_abeko/citerne_tarif/:id', {
                templateUrl: '/fr_abeko/tarifciterne/view',
                controller: 'FrAbekoCiterneTarifViewCtrl'
            })

        ;
    }]);


app.controller('FrAbekoCiterneTarifViewCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', '$uibModal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, $uibModal) {

        $scope.$parent.loadMenu("fr_abeko", "fr_abeko_citerne_tarif");



        $scope.form = [];
        $scope.baches = [];
        $scope.ligne_tarifs = [];




        var loadListTypeBache = function () {
            var options = {};
            $http.post('/fr_abeko/typebache/getAll', options).then(function (response) {
                if (response.status == 200) {
                    $scope.baches = response.data ;
                }
            });
        };
        loadListTypeBache() ;






        var loadListLigneTarif = function (argIdTarif) {
            var options = {};
            $http.post('/fr_abeko/tarifciterne/getLignesAll/' + argIdTarif, options).then(function (response) {
                if (response.status == 200) {
                    $scope.ligne_tarifs = response.data ;

                    for(var i=0; i < $scope.ligne_tarifs.length ; i++) {
                        $scope.ligne_tarifs[i].edit = 'N' ;
                        $scope.ligne_tarifs[i].update = 'N' ;
                        $scope.ligne_tarifs[i].delete = 'N' ;
                    }
                }
            });
        };




        $scope.ajouter_ligne = function() {
            var ligne_tarif = {} ;
            ligne_tarif.id = 0 ;
            ligne_tarif.edit = 'N' ;
            ligne_tarif.update = 'N' ;
            ligne_tarif.delete = 'N' ;

            ligne_tarif.m3 = $scope.m3 ;
            ligne_tarif.largeur = $scope.largeur ;
            ligne_tarif.profondeur = $scope.profondeur ;
            ligne_tarif.tarif = getNumberTxt($scope.tarif) ;

            $scope.ligne_tarifs.push(ligne_tarif) ;

            $scope.m3 = "" ;
            $scope.largeur = "" ;
            $scope.profondeur = "" ;
            $scope.tarif = "" ;
        };


        $scope.editer_ligne = function (ligne) {
            ligne.edit = 'Y' ;
        };

        $scope.valider_ligne = function (ligne) {
            ligne.edit = 'N' ;
            ligne.update = 'Y' ;
        };

        $scope.delete_ligne = function (ligne) {

            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous supprimer ce tarif ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la suppression';
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'success') {
                    ligne.delete = 'Y' ;
                }

            }, function () {
                //console.log("rien");
            });



        };










        // charge la fiche
        if ($routeParams.id && $routeParams.id != 0) {
            $http.get('/fr_abeko/tarifciterne/get/' + $routeParams.id).then(function (response) {
                if (response.status == 200) {
                    $scope.form = response.data;

                    loadListLigneTarif($routeParams.id) ;
                }
            });
        }


        $scope.save = function () {
            var $data = {} ;

            if ($routeParams.id != 0) {
                $data.id = $routeParams.id;
            }

            $data.nom = $scope.form.nom ;
            $data.id_bache = $scope.form.id_bache ;

            $data.ligne_tarifs = $scope.ligne_tarifs ;


            $http.post('/fr_abeko/tarifciterne/save', $data).then(function (obj) {
                // pour que la page puisse être redirigé
                $location.path("/ng/fr_abeko/citerne_tarif");
            });
        }

        $scope.cancel = function () {
            $location.path("/ng/fr_abeko/citerne_tarif");
        }



        var getNumberTxt = function (value) {
            if (isNaN(value) && value && value != null) {
                value = value.replace(",", ".");
            }
            return value ;
        }


    }]);
app.controller('FrAbekoTypeBacheListCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', '$uibModal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, $uibModal) {

        $scope.$parent.loadMenu("fr_abeko", "fr_abeko_type_bache");


        $scope.baches = [] ;


        var loadList = function () {
            var options = {};
            $http.post('/fr_abeko/typebache/getAll', options).then(function (response) {
                if (response.status == 200) {
                    $scope.baches = response.data ;
                }
            });
        };
        loadList() ;





        $scope.delete = function (argIdUser) {
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous supprimer définitivement ce type de bâche ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la suppression';
                    }
                }
            });

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {
                    $http.get('/fr_abeko/typebache/delete/' + argIdUser).then(function (response) {
                        if (response.status == 200) {
                            loadList() ;
                        }
                    });
                }

            }, function () {
                //console.log("rien");
            });

        };


    }]);
app.config(['$routeProvider',
    function ($routeProvider) {
        $routeProvider
            .when('/ng/fr_abeko/type_bache', {
                templateUrl: '/fr_abeko/typebache/search',
                controller: 'FrAbekoTypeBacheListCtrl'
            })
            .when('/ng/fr_abeko/type_bache/new', {
                templateUrl: '/fr_abeko/typebache/view',
                controller: 'FrAbekoTypeBacheViewCtrl'
            })
            .when('/ng/fr_abeko/type_bache/:id', {
                templateUrl: '/fr_abeko/typebache/view',
                controller: 'FrAbekoTypeBacheViewCtrl'
            })

        ;
    }]);


app.controller('FrAbekoTypeBacheViewCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', '$uibModal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, $uibModal) {

        $scope.$parent.loadMenu("fr_abeko", "fr_abeko_type_bache");



        $scope.form = [];

        // charge la fiche
        if ($routeParams.id && $routeParams.id != 0) {
            $http.get('/fr_abeko/typebache/get/' + $routeParams.id).then(function (response) {
                if (response.status == 200) {
                    $scope.form = response.data;
                }
            });
        }


        $scope.save = function () {
            var $data = {} ;

            if ($routeParams.id != 0) {
                $data.id = $routeParams.id;
            }

            $data.nom = $scope.form.nom ;


            $http.post('/fr_abeko/typebache/save', $data).then(function (obj) {
                // pour que la page puisse être redirigé
                $location.path("/ng/fr_abeko/type_bache");
            });
        }

        $scope.cancel = function () {
            $location.path("/ng/fr_abeko/type_bache");
        }

    }]);
// declare the modal to the app service
listModuleModalFunction.push({
    module_name:'meeting_app',
    function_name:'addMeet',
    templateUrl:'/meeting_app/meet/modalAddMeet',
    controller:'MeetingAppModalAddMeetFormCtrl',
    size:'lg',
    resolve:{
        titre: function () {
            return "Ajout d'une réunion" ;
        }
    }
});


app.controller('MeetingAppModalAddMeetFormCtrl', function($scope, $uibModalInstance, $http, titre, option, $routeParams) {


    /**
     * Persist in database
     */
    $scope.save = function (id_project) {
        var $data = {};
        var meet = false;
        /************ Check if fields(name, date and description) are completed *************/

        if ($scope.form.name != undefined && $scope.form.date_meet != undefined) {

            $data.id_project = option.id_project;


            $data.id = $scope.form.id;
            $data.name = $scope.form.name;
            $data.description = $scope.form.description;
            if($scope.form.date_meet) {
                var y = $scope.form.date_meet.getFullYear();
                var M = $scope.form.date_meet.getMonth();
                var d = $scope.form.date_meet.getDate();

                var date = new Date(Date.UTC(y, M, d));

                $data.date_meet = date;
            }


            $http.post('/meeting_app/meet/save', $data).then(function (obj) {
                // pour que la page puisse être redirigé
                console.log(obj.data);
                $uibModalInstance.close(meet);
            });
        }
    }




    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };

    // charge la fiche

    if (option.id && option.id != 0) {
        $http.get('/meeting_app/meet/get/' + option.id).then(function (response) {
            if (response.status == 200) {
                $scope.form = response.data;
                $scope.form.date_meet = new Date($scope.form.date_meet);
            }
        });
    }







}) ;

app.controller('MeetingAppMeetPlanCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', 'zeapps_modal', '$uibModal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, zeapps_modal, $uibModal) {




        var loadList = function () {

            $http.get('/meeting_app/meet/getMeetByProject/'+ $routeParams.id).then(function (response) {
                if (response.status == 200) {
                    $scope.meets = response.data ;

                }
            });
        };
        loadList() ;




        $scope.addMeet = function () {
            console.log(id_project);
            zeapps_modal.loadModule("meeting_app", "addMeet", {id_project:id_project}, function(objReturn) {

                loadList() ;
            });

        };

        $scope.edit_meet = function (id) {
            zeapps_modal.loadModule("meeting_app", "addMeet", {id:id}, function(objReturn) {

                loadList() ;
            });
        };


        /**
         * Delete a meet
         */

        $scope.delete_meet = function (id_meet) {
            //console.log($scope.delete);
            var modalInstance = $uibModal.open({

                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous supprimer définitivement ce projet ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la suppression';
                    }

                }

            });

            /********** Send the Http request to the Php controller and reload projects **********/

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {
                    // console.log(workload_id);
                    $http.get('/meeting_app/meet/delete/' + id_meet).then(function (response) {
                        if (response.status == 200) {
                            console.log(response.data);
                            loadList() ;
                        }
                    });
                }

            }, function () {
                //console.log("rien");
            });

        };





    }]);


app.config(['$routeProvider',
    function ($routeProvider) {
        $routeProvider
            .when('/ng/meeting_app/meet/plan/:id', {
                templateUrl: '/meeting_app/meet/plan',
                controller: 'MeetingAppMeetPlanCtrl'
            })

        ;
    }]);



app.controller('MeetingAppProjectsFormCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', 'zeapps_modal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, zeapps_modal) {


        $scope.form = [];

        /**
         * Persist in database
         */
        $scope.save = function () {
            var $data = {};

            /************ Check if fields(name and description) are completed *************/

            if ($scope.form.name != undefined && $scope.form.description != undefined) {
                if ($routeParams.id != 0) {
                    $data.id = $routeParams.id;
                }

                $data.name = $scope.form.name;
                $data.description = $scope.form.description;


                $http.post('/meeting_app/project/save', $data).then(function (obj) {
                    // pour que la page puisse être redirigé
                    console.log(obj.data);
                    $location.path("/ng/meeting_app/project/plan");


                });
             }
            }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        // charge la fiche
        if ($routeParams.id && $routeParams.id != 0) {
            $http.get('/meeting_app/project/get/' + $routeParams.id).then(function (response) {
                if (response.status == 200) {
                    $scope.form = response.data;
                }
            });
        }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        $scope.cancel = function () {
            $location.path("/ng/meeting_app/project/plan");
        }



    }]);







app.controller('MeetingAppPlanCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', 'zeapps_modal', '$uibModal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, zeapps_modal, $uibModal) {

        /*********** Load all projects saved in BDD ***********/

        var loadList = function () {
            $http.get('/meeting_app/project/getAll').then(function (response) {
                if (response.status == 200) {
                    $scope.projects = response.data ;
                    console.log("toto");
                }
            });
        };
        loadList() ;


        /*********** Delete project with id_project in argument ***********/

        $scope.delete_project = function (id_project) {
            //console.log($scope.delete);
            var modalInstance = $uibModal.open({

                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous supprimer définitivement ce projet ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la suppression';
                    }

                }

            });

            /********** Send the Http request to the Php controller and reload projects **********/

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {
                    // console.log(workload_id);
                    $http.get('/meeting_app/project/delete/' + id_project).then(function (response) {
                        if (response.status == 200) {
                            console.log(response.data);
                            loadList() ;
                        }
                    });
                }

            }, function () {
                //console.log("rien");
            });

        };



        $scope.edit_project = function (id_project) {
            $location.path("/ng/meeting_app/project/" + id_project);
        };


        /******** Call addMeet Modal *********/

        $scope.addMeet = function (id_project) {
            zeapps_modal.loadModule("meeting_app", "addMeet", {id_project:id_project}, function(objReturn) {

            loadList();
            });

        };





    }]);


app.config(['$routeProvider',
    function ($routeProvider) {
        $routeProvider
            .when('/ng/meeting_app/project/plan', {
                templateUrl: '/meeting_app/project/plan',
                controller: 'MeetingAppPlanCtrl'
            })

            .when('/ng/meeting_app/project/new', {
                templateUrl: '/meeting_app/project/form',
                controller: 'MeetingAppProjectsFormCtrl'
            })

            .when('/ng/meeting_app/project/:id', {
                templateUrl: '/meeting_app/project/form',
                controller: 'MeetingAppProjectsFormCtrl'
            })

        ;
    }]);


app.directive('autofocus', function($timeout) {
    return {
        restrict: 'A',
        link : function($scope, $element) {
            $timeout(function() {
                $element[0].focus();
            });
        }
    }
});

// declare the modal to the app service
listModuleModalFunction.push({
    module_name:'meeting_app',
    function_name:'addParticipant',
    templateUrl:'/meeting_app/subject/modalParticipant',
    controller:'MeetingAppModalParticipantsFormCtrl',
    size:'lg',
    resolve:{
        titre: function () {
            return "Ajout d'un participant" ;
        }
    }
});


app.controller('MeetingAppModalParticipantsFormCtrl', function($scope, $uibModalInstance, $http, titre, option, $routeParams) {


   var loadList = function(){

       $http.post('/meeting_app/subject/getUsers').then(function (response) {
           if (response.status == 200) {
               $scope.users = response.data ;

           }
       });
   };
    loadList() ;



    $scope.addParticipant = function(user_id){

        var data = {};
        var subject = false;

        if ($routeParams.id_meet && $routeParams.id_meet != 0 ) {
            data.id_meet = $routeParams.id_meet;

        }
            data.id_note = option.id_note;
            data.id_participant = user_id;


        $http.post('/meeting_app/subject/addParticipant', data).then(function (obj) {



            $uibModalInstance.close(obj.data);
            loadList();


        });

    }





}) ;
// declare the modal to the app service
listModuleModalFunction.push({
    module_name:'meeting_app',
    function_name:'addSubject',
    templateUrl:'/meeting_app/subject/modalSubject',
    controller:'MeetingAppModalSubjectsFormCtrl',
    size:'lg',
    resolve:{
        titre: function () {
            return "Ajout d'un sujet" ;
        }
    }
});


app.controller('MeetingAppModalSubjectsFormCtrl', function($scope, $uibModalInstance, $http, titre, option, $routeParams) {


    /**
     * Persist in database
     */
    $scope.save = function () {
        var $data = {};
        var subject = false;
        /************ Check if fields(name and description) are completed *************/

        if ($scope.form.name != undefined) {
            if ($routeParams.id_meet && $routeParams.id_meet != 0 && $routeParams.id_project && $routeParams.id_project != 0 ) {
                $data.id_meet = $routeParams.id_meet;
                $data.id_project = $routeParams.id_project;
            }

            $data.name = $scope.form.name;



            $http.post('/meeting_app/subject/save', $data).then(function (obj) {
                // pour que la page puisse être redirigé
                console.log(obj.data);
                $uibModalInstance.close(subject);
            });
        }
    }



    $scope.cancel = function () {
        $uibModalInstance.dismiss('cancel');
    };






}) ;

app.controller('MeetingAppSubjectsPlanCtrl', ['$scope', '$route', '$routeParams', '$location', '$rootScope', '$http', 'zeapps_modal', '$uibModal',
    function ($scope, $route, $routeParams, $location, $rootScope, $http, zeapps_modal, $uibModal) {

        $scope.notes = [];
        $scope.form = {};
        $scope.arrayNotes = {};

        $scope.test = {};



        $scope.edition_encours_global == false;


        $scope.addSubject = function () {

            zeapps_modal.loadModule("meeting_app", "addSubject", {}, function(objReturn) {
                loadList() ;
            });

        };


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        $scope.addParticipant = function (note, $event) {
            note.edition_encours = false ;
            $event.stopPropagation();


            zeapps_modal.loadModule("meeting_app", "addParticipant", {"id_note":note.id}, function(objReturn) {
                if(objReturn)
                    note.participants.push(objReturn)
                    loadParticipant();
            });

            $scope.edition_encours_global = false ;

        };
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        /*********** Check id send on URL and display the good project ***********/

        var getProjectId = function()
        {

            $http.get('/meeting_app/project/get/'+ $routeParams.id_project).then(function (response) {
                if (response.data && response.data != "false") {

                    $scope.project = response.data;
                }

            });
        };
        getProjectId();


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        /*********** Check id send on URL and display the good project ***********/

        var getMeetId = function()
        {

            $http.get('/meeting_app/meet/get/'+ $routeParams.id_meet).then(function (response) {
                if (response.data && response.data != "false") {

                    $scope.meet = response.data;
                }

            });
        };
        getMeetId();

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        /*********** Load all subjects of a project saved in BDD ***********/

        var loadList = function () {

            $http.get('/meeting_app/subject/getSubByMeet/'+ $routeParams.id_meet).then(function (response) {
                if (response.status == 200) {
                    $scope.subjects = response.data ;
                    if (!$scope.arrayNotes[0])
                        $scope.arrayNotes[0] = [];
                    angular.forEach($scope.subjects, function(subject) {
                        if (!$scope.arrayNotes[subject.id])
                            $scope.arrayNotes[subject.id] = [];
                    });
                }
            });
        };
        loadList() ;


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        $scope.delete_subject = function (id_subject) {


            var modalInstance = $uibModal.open({

                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous supprimer définitivement ce sujet ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la suppression';
                    }

                }

            });

            /********** Send the Http request to the Php controller and reload projects **********/

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {
                    // console.log(workload_id);
                    $http.get('/meeting_app/subject/delete/' + id_subject).then(function (response) {
                        if (response.status == 200) {
                            console.log(response.data);
                            loadList() ;
                        }
                    });
                }

            }, function () {
                //console.log("rien");
            });

        };


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        /******* Create an empty field for note *******/

        $scope.createNote = function (type_note) {
            if ($scope.edition_encours_global == false) {
                var data = {};

                data.name = "";
                data.description = "";
                data.description_edit = "";
                data.type_note = type_note;
                data.edition_encours = true ;
                data.position = 0;
                data.id_subject = 0;

                data.participants = [];

                if ( !$scope.arrayNotes[0]){
                    $scope.arrayNotes[0]= [];
                }
                $scope.arrayNotes[0].unshift(data);

                $scope.edition_encours_global = true;
            }
        }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        /******** Load all notes in the view ********/

        var loadNotes = function () {

            $http.get('/meeting_app/subject/getNoteByMeet/'+ $routeParams.id_meet).then(function (response) {

                if (response.status == 200) {
                    $scope.notes = response.data ;
                    console.log(response.data)
                    angular.forEach($scope.notes, function(note){
                        if(!$scope.arrayNotes[note.id_subject])
                            $scope.arrayNotes[note.id_subject] = [];
                        $scope.arrayNotes[note.id_subject].push(note);
                    })
                }

            });
        };

        loadNotes() ;


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        /****** Test for type logos with ng-class ********/


        $scope.foo = function(note){
            if (note["type_note"] == "task"){
                return "fa-tasks";
            }
            if (note["type_note"] == "deadline"){
                return "fa-calendar";
            }
            if (note["type_note"] == "remark"){
                return "fa-pencil";
            }
            if (note["type_note"] == "call") {
                return "fa-phone";
            }
            if (note["type_note"] == "meeting") {
                return "fa-users";
            }
            if (note["type_note"] == "document") {
                return "fa-file-o";
            }
            if (note["type_note"] == "question") {
                return "fa-question";
            }
            if (note["type_note"] == "idea"){
                return "fa-lightbulb-o";
            }
            if (note["type_note"] == "customer"){
                return  "fa-handshake-o";
            }
            if (note["type_note"] == "picture"){
                return "fa-camera";
            }
            if (note["type_note"] == "mail"){
                return "fa-envelope-o";
            }
            if (note["type_note"] == "danger"){
                return "fa-exclamation-triangle";
            }

        }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        $scope.delete_note = function (note, $event) {
            note.edition_encours = false ;
            $event.stopPropagation();
            if ( note ){


            //console.log($scope.delete);
            var modalInstance = $uibModal.open({


                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous supprimer définitivement cette note ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la suppression';
                    }

                }

            });

            /********** Send the Http request to the Php controller and reload projects **********/

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {

                    $http.get('/meeting_app/subject/deleteNote/' + note.id).then(function (response) {
                        if (response.status == 200) {
                            var index = $scope.arrayNotes[note.id_subject].indexOf(note);


                            $scope.arrayNotes[note.id_subject].splice(index, 1);

                            for ( var i = index ; i < $scope.arrayNotes[note.id_subject].length; i++){
                                $scope.arrayNotes[note.id_subject][i].position --;
                            }



                        }
                        $scope.edition_encours_global = false ;

                    });

                }

            }, function () {


                    //console.log("rien");

                });
            }

        };

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        
        



        $scope.edition_encours_global = false ;
        $scope.edit_note = function (note) {
            if ($scope.edition_encours_global == false) {
                note.edition_encours = true;
                note.description_edit = note.description;

                $scope.edition_encours_global = true;
            }


        };


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        
        $scope.save_note = function (note, $event) {
            note.edition_encours = false ;
            $event.stopPropagation();
            var data = {};

            if ($routeParams.id_meet && $routeParams.id_meet != 0 && $routeParams.id_project && $routeParams.id_project != 0 ) {
                data.id_meet = $routeParams.id_meet;
                data.id_project = $routeParams.id_project;
            }



            data.id = note.id;
            data.description = note.description_edit;
            data.type_note = note.type_note ;
            data.position = note.position;
            data.id_subject = note.id_subject;



            $http.post('/meeting_app/subject/saveNote', angular.toJson(data)).then(function (obj) {

                note.id = obj.data.id;
                note.description = note.description_edit;
                console.log(obj.data);


            });

            $scope.edition_encours_global = false ;
        };


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



        $scope.cancel_note = function (note, $event) {

            note.edition_encours = false ;

            $event.stopPropagation();

            /** If user don't write a description , logo is delete from display **/

            if (note.id == undefined){
                var index = $scope.arrayNotes[note.id_subject].indexOf(note);

                $scope.arrayNotes[note.id_subject].splice(index, 1);

            }

            $scope.edition_encours_global = false ;
        };

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Drag and Drop d'un tableau à l'autre

        $scope.sortableNote = {
            connectWith: ".noteContainer",
            placeholder: "app",
            delay: 300,
            axis: "y",
            stop: function( event, ui ) {

                //Id of dragged note
                var idObj = $(ui.item[0]).attr("data-id") ;
                console.log(idObj);
                //Select the table line and his parent ("tr")
                var selectedLine = $(".ligne_tableau_" + idObj) ;
                var subject_id =  selectedLine.parent().attr("data-type") ;



                var position = -1 ;
                var positionDefinitive = 0 ;

                //Select tbody and go through each row
                $("tr", selectedLine.parent()).each(function () {
                    position++ ;
                    if (idObj == $(this).attr("data-id")) {
                        positionDefinitive = position  ;

                    }
                }) ;
                var data = {} ;
                data.idObj = idObj ;
                data.id_subject = subject_id ;
                data.position = positionDefinitive ;

                $http.post('/meeting_app/subject/saveNotePosition', data);
            }

        }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        $scope.draggableSubject = {
            connectWith: ".dropZone",
            placeholder: "app",

            stop: function( event, ui ) {

                //Id of dragged note
                var idObj = $(ui.item[0]).attr("data-id") ;

                console.log(event);
                console.log(ui);


            }

        }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        $scope.done_note = function (note, $event) {
            note.edition_encours = false ;
            $event.stopPropagation();


            var data = {};

            if ($routeParams.id_meet && $routeParams.id_meet != 0 && $routeParams.id_project && $routeParams.id_project != 0 ) {
                data.id_meet = $routeParams.id_meet;
                data.id_project = $routeParams.id_project;
            }

            if(note.status == 0){
                note.status = 1;
            }
            else{
                note.status = 0;
            }
            data.id = note.id;
            data.status = note.status;


            $http.post('/meeting_app/subject/done_note', angular.toJson(data)).then(function (obj) {
                data.id = note.id;
                data.status = parseInt(note.status);
                console.log(obj.data);

            });

            $scope.edition_encours_global = false ;

        }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            var loadParticipant = function(){
                $http.get('/meeting_app/subject/loadParticipant/'+ $routeParams.id_meet).then(function (response) {

                    if (response.status == 200) {
                        $scope.participants = response.data ;
                        console.log($scope.participants)

                    }
                });
            }

            loadParticipant();

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        $scope.delete_participant = function (note, participant, $event) {


            note.edition_encours = false ;
            $event.stopPropagation();


            var modalInstance = $uibModal.open({

                animation: true,
                templateUrl: '/assets/angular/popupModalDeBase.html',
                controller: 'ZeAppsPopupModalDeBaseCtrl',
                size: 'lg',
                resolve: {
                    titre: function () {
                        return 'Attention';
                    },
                    msg: function () {
                        return 'Souhaitez-vous supprimer définitivement ce projet ?';
                    },
                    action_danger: function () {
                        return 'Annuler';
                    },
                    action_primary: function () {
                        return false;
                    },
                    action_success: function () {
                        return 'Je confirme la suppression';
                    }

                }

            });

            /********** Send the Http request to the Php controller and reload projects **********/

            modalInstance.result.then(function (selectedItem) {
                if (selectedItem.action == 'danger') {

                } else if (selectedItem.action == 'success') {

                    $http.get('/meeting_app/subject/deleteParticipant/' + participant.id).then(function (response) {
                        if (response.status == 200) {
                            console.log(response.data);
                            note.participants.splice(note.participants.indexOf(participant),1);

                        }
                    });

                    $scope.edition_encours_global = false ;
                }

            }, function () {
                //console.log("rien");
            });

        };

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////









    }]);




app.config(['$routeProvider',
    function ($routeProvider) {
        $routeProvider
            .when('/ng/meeting_app/subject/plan/:id_project/:id_meet', {
                templateUrl: '/meeting_app/subject/plan',
                controller: 'MeetingAppSubjectsPlanCtrl'
            })

            .when('/ng/meeting_app/subject/new', {
                templateUrl: '/meeting_app/subject/form',
                controller: 'MeetingAppSubjectsFormCtrl'
            })

            .when('/ng/meeting_app/user/:id', {
                templateUrl: '/meeting_app/subject/plan',
                controller: 'MeetingAppSubjectsPlanCtrl'
            })


        ;
    }]);


app.directive('scrollspy', function($window) {

    var $win = angular.element($window); // wrap window object as jQuery object

    return {
        restrict: 'A',
        link: function (scope, element, attrs) {
            var topClass = attrs.scrollspy, // get CSS class from directive's attribute value
                offsetTop = element.offset().top -184; // get element's offset top relative to document
            console.log("plop");

            $win.on('scroll', function (e) {
                if ($win.scrollTop() >= offsetTop) {
                    element.addClass(topClass);
                } else {
                    element.removeClass(topClass);
                }
            });
        }
    };
});

angular.module('testApp', [])
    .controller('FooController', ['$scope', '$http', '$location', function($scope, $http, $location) {
        $scope.model = {};

        $scope.save = function(model) {
            $http.post('/api/foo.json', model).success(function() {
                $location.url('/redirect/to/url');
            });
        };
    }])
;
